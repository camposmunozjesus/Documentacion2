%PDF-1.5%‚„œ”
1 0 obj<</Pages 2 0 R/Outlines 5 0 R/Type/Catalog/Names 32 0 R/StructTreeRoot 6 0 R/Metadata 87 0 R/SpiderInfo 73 0 R>>endobj2 0 obj<</Count 10/Kids[10 0 R 13 0 R 15 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 39 0 R]/Type/Pages>>endobj3 0 obj<</ModDate(D:20040812080149+02'00')/CreationDate(D:20040812080146Z)/Title(IntroducciÛn al API Reflection \(ReflexiÛn\) de Java.)/Producer(Acrobat Web Capture 6.0)>>endobj5 0 obj<</Count 2/Type/Outlines/First 85 0 R/Last 85 0 R>>endobj6 0 obj<</Type/StructTreeRoot/K 8 0 R/ClassMap 7 0 R/ParentTree 11 0 R/ParentTreeNextKey 10>>endobj7 0 obj<</SpdrArt<</O/WebCapture>>>>endobj8 0 obj<</K 9 0 R/P 6 0 R/S/Document>>endobj9 0 obj<</K[0<</Type/MCR/MCID 0/Pg 13 0 R>><</Type/MCR/MCID 0/Pg 15 0 R>><</Type/MCR/MCID 0/Pg 17 0 R>><</Type/MCR/MCID 0/Pg 19 0 R>><</Type/MCR/MCID 0/Pg 21 0 R>><</Type/MCR/MCID 0/Pg 23 0 R>><</Type/MCR/MCID 0/Pg 25 0 R>><</Type/MCR/MCID 0/Pg 27 0 R>><</Type/MCR/MCID 0/Pg 39 0 R>>]/C/SpdrArt/P 8 0 R/S/Article/Pg 10 0 R>>endobj10 0 obj<</ID 79 0 R/Contents 51 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 42 0 R/TT0 43 0 R/TT1 45 0 R/TT2 47 0 R/T1_2 49 0 R>>/ProcSet[/PDF/Text]>>/StructParents 0>>endobj11 0 obj<</Nums[0 12 0 R 1 14 0 R 2 16 0 R 3 18 0 R 4 20 0 R 5 22 0 R 6 24 0 R 7 26 0 R 8 28 0 R 9 40 0 R]>>endobj12 0 obj[9 0 R]endobj13 0 obj<</ID 79 0 R/Contents 55 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 49 0 R/TT0 43 0 R/TT1 47 0 R/TT2 45 0 R/TT3 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 1>>endobj14 0 obj[9 0 R]endobj15 0 obj<</ID 79 0 R/Contents 57 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 2>>endobj16 0 obj[9 0 R]endobj17 0 obj<</ID 79 0 R/Contents 59 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 42 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R/T1_2 49 0 R/TT3 45 0 R>>/ProcSet[/PDF/Text]>>/StructParents 3>>endobj18 0 obj[9 0 R]endobj19 0 obj<</ID 79 0 R/Contents 61 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/TT0 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 4>>endobj20 0 obj[9 0 R]endobj21 0 obj<</ID 79 0 R/Contents 63 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 42 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R/TT3 45 0 R>>/ProcSet[/PDF/Text]>>/StructParents 5>>endobj22 0 obj[9 0 R]endobj23 0 obj<</ID 79 0 R/Contents 65 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 6>>endobj24 0 obj[9 0 R]endobj25 0 obj<</ID 79 0 R/Contents 67 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/TT0 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 7>>endobj26 0 obj[9 0 R]endobj27 0 obj<</ID 79 0 R/Annots 30 0 R/Contents 69 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 42 0 R/TT0 52 0 R/TT1 43 0 R/TT2 45 0 R/TT3 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 8>>endobj28 0 obj[9 0 R]endobj29 0 obj<</Rect[219.427994 438.191772 227.960007 451.191772]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(‡|†≤ı˚8m§Ã∑—<recurso-1)/S/GoTo>>/PA<</URI(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/reflection.html#recurso-1)/S/URI>>>>endobj30 0 obj[29 0 R 31 0 R 35 0 R 36 0 R 38 0 R]endobj31 0 obj<</Rect[281.828003 330.783539 290.359985 343.783539]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</D(‡|†≤ı˚8m§Ã∑—<recurso-2)/S/GoTo>>/PA<</URI(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/reflection.html#recurso-2)/S/URI>>>>endobj32 0 obj<</Dests 33 0 R/IDS 83 0 R/URLS 84 0 R>>endobj33 0 obj<</Names[(‡|†≤ı˚8m§Ã∑—<recurso-1)34 0 R(‡|†≤ı˚8m§Ã∑—<recurso-2)37 0 R]>>endobj34 0 obj[27 0 R/XYZ 0 120.358856 null]endobj35 0 obj<</Rect[508.891998 106.158844 549.764038 119.158844]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://java.sun.com/docs/books/tutorial/reflect/)/S/URI>>>>endobj36 0 obj<</Rect[50.0 89.75885 302.119995 102.75885]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://java.sun.com/docs/books/tutorial/reflect/)/S/URI>>>>endobj37 0 obj[27 0 R/XYZ 0 68.558853 null]endobj38 0 obj<</Rect[250.363998 54.358856 534.427979 67.358856]/Border[0 0 0]/BS<</W 0/Type/Border/S/S>>/Subtype/Link/A<</URI(http://jakarta.apache.org/commons/beanutils/)/S/URI>>>>endobj39 0 obj<</ID 79 0 R/Contents 71 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/T1_1 42 0 R/TT0 43 0 R>>/ProcSet[/PDF/Text]>>/StructParents 9>>endobj40 0 obj[9 0 R]endobj41 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Times-Roman/Subtype/Type1>>endobj42 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Helvetica-Bold/Subtype/Type1>>endobj43 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Verdana/FirstChar 0/LastChar 255/Subtype/TrueType/FontDescriptor 44 0 R/Widths[1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 352 394 459 818 636 1076 727 269 454 454 636 818 364 454 364 454 636 636 636 636 636 636 636 636 636 636 454 454 818 818 818 545 1000 684 686 698 771 632 575 775 751 421 455 693 557 843 748 787 603 787 695 684 616 732 684 989 685 615 685 454 454 454 818 636 636 601 623 521 623 596 352 623 633 274 344 592 274 973 633 607 623 623 427 521 394 633 592 818 592 592 525 635 454 635 818 545 636 545 269 636 459 818 636 636 636 1521 684 454 1070 545 685 545 545 269 269 459 459 545 636 1000 636 977 521 454 981 545 525 615 352 394 636 636 636 636 454 636 636 1000 545 645 818 454 1000 636 542 818 542 542 636 642 636 364 636 542 545 645 1000 1000 1000 545 684 684 684 684 684 684 984 698 632 632 632 632 421 421 421 421 775 748 787 787 787 787 787 818 787 732 732 732 732 615 605 620 601 601 601 601 601 601 955 521 596 596 596 596 274 274 274 274 612 633 607 607 607 607 607 818 607 633 633 633 633 592 623 592]>>endobj44 0 obj<</Type/FontDescriptor/FontBBox[-50 -207 1447 1000]/FontName/Verdana/Flags 32/StemV 92/CapHeight 727/XHeight 545/Ascent 1000/Descent -207/ItalicAngle 0>>endobj45 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Verdana,Bold/FirstChar 0/LastChar 255/Subtype/TrueType/FontDescriptor 46 0 R/Widths[1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 342 402 587 867 711 1272 862 332 543 543 711 867 361 480 361 689 711 711 711 711 711 711 711 711 711 711 402 402 867 867 867 617 964 776 762 724 830 683 650 811 837 546 555 771 637 948 847 850 733 850 782 710 682 812 764 1128 764 737 692 543 689 543 867 711 711 668 699 588 699 664 422 699 712 342 403 671 342 1058 712 687 699 699 497 593 456 712 650 979 669 651 597 711 543 711 867 711 711 711 332 711 587 1049 711 711 711 1777 710 543 1135 711 692 711 711 332 332 587 587 711 711 1000 711 964 593 543 1068 711 597 737 342 402 711 711 711 711 543 711 711 964 598 850 867 480 964 711 587 867 598 598 711 721 711 361 711 598 598 850 1182 1182 1182 617 776 776 776 776 776 776 1094 724 683 683 683 683 546 546 546 546 830 847 850 850 850 850 850 867 850 812 812 812 812 737 735 713 668 668 668 668 668 668 1018 588 664 664 664 664 342 342 342 342 679 712 687 687 687 687 687 867 687 712 712 712 712 651 699 651]>>endobj46 0 obj<</Type/FontDescriptor/FontBBox[-73 -208 1707 1000]/FontName/Verdana,Bold/Flags 32/StemV 176/CapHeight 727/XHeight 548/Ascent 1000/Descent -208/ItalicAngle 0>>endobj47 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/Verdana,Italic/FirstChar 0/LastChar 255/Subtype/TrueType/FontDescriptor 48 0 R/Widths[1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 352 394 459 818 636 1076 727 269 454 454 636 818 364 454 364 454 636 636 636 636 636 636 636 636 636 636 454 454 818 818 818 545 1000 683 686 698 766 632 575 775 751 421 455 693 557 843 748 787 603 787 695 684 616 732 683 990 685 615 685 454 454 454 818 636 636 601 623 521 623 596 352 622 633 274 344 587 274 973 633 607 623 623 427 521 394 633 591 818 592 591 525 635 454 635 818 545 636 545 269 636 459 818 636 636 636 1519 684 454 1070 545 685 545 545 269 269 459 459 545 636 1000 636 977 521 454 980 545 525 615 352 394 636 636 636 636 454 636 636 1000 545 645 818 454 1000 636 542 818 542 542 636 642 636 364 636 542 545 645 1000 1000 1000 545 683 683 683 683 683 683 989 698 632 632 632 632 421 421 421 421 766 748 787 787 787 787 787 818 787 732 732 732 732 615 605 620 601 601 601 601 601 601 955 521 596 596 596 596 274 274 274 274 612 633 607 607 607 607 607 818 607 633 633 633 633 591 623 591]>>endobj48 0 obj<</Type/FontDescriptor/FontBBox[-131 -207 1461 1000]/FontName/Verdana,Italic/Flags 96/StemV 88/CapHeight 727/XHeight 545/Ascent 1000/Descent -207/ItalicAngle -13>>endobj49 0 obj<</Type/Font/BaseFont/ZapfDingbats/Subtype/Type1>>endobj50 0 obj 4455endobj51 0 obj<</Length 50 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [12 557.17529 600 606.37531 ]>>BDC 
Q
12 557.17531 588 49.2 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [13 558.17529 599 605.37531 ]>>BDC 
Q
1 1 1 rg
13 558.17531 586 47.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_1 1 Tf
20 0 0 20 10 729.47568 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 692.858 Tm
(Fecha de creaci\363n: )Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(Revisi\363n )Tj
/TT1 1 Tf
(1.0)Tj
/TT0 1 Tf
( \()Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
(\) )Tj
/TT1 1 Tf
0 -2.78403 TD
(Eneko Gonz\341lez Benito \(Keko\))Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(enekog AT euskalnet DOT net)Tj
/TT2 1 Tf
0.41667 -3.2 Td
(Copyright \(c\) 2004, Eneko Gonz\341lez Benito. Este documento puede ser\ distribuido solo bajo los )Tj
0 -1.2 TD
(t\351rminos y condiciones de la licencia de Documentaci\363n de javaHisp\ano v1.0 o posterior \(la )Tj
T*
(\372ltima versi\363n se encuentra en http://www.javahispano.org/licencia\s/\).)Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 520.40341 Tm
(Introducci\363n )Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 50 484.4333 Tm
([1] El API Reflection es una herramienta muy poderosa que nos permite re\alizar en )Tj
T*
(Java cosas que en otros lenguajes es imposible. Sin embargo, y a pesar d\e su )Tj
T*
(potencial, es un API bastante desconocido, sobre todo para los principia\ntes en el )Tj
T*
(mundo Java. A lo largo de este \341rticulo, vamos a intentar comprender \las )Tj
T*
(posibilidades que nos ofrece este API, introduci\351ndonos poco a poco e\n su uso.)Tj
0 -2.78333 TD
([2] Todos sabemos que un buen dise\361o es )Tj
/TT1 1 Tf
(muy importante)Tj
/TT0 1 Tf
( \(si no imprescindible\) )Tj
0 -1.20068 TD
(en cualquier programa. Para ello, estamos acostumbrados a utilizar heren\cia, )Tj
0 -1.2 TD
(interfaces, etc. en nuestros programas. Sin embargo, la infinita varieda\d de )Tj
T*
(problemas a los que no podemos tener que enfrentar, hace que estas t\351\cnicas no )Tj
T*
(siempre sean suficientes para nuestros prop\363sitos.)Tj
0 -2.78333 TD
([3] Pongamos, por ejemplo, que estamos trabajando en un programa que nos\ )Tj
0 -1.2 TD
(ayude a )Tj
/TT2 1 Tf
(debuggear)Tj
/TT0 1 Tf
( otros programas, describiendo el contenido de cualquier objeto )Tj
T*
(que queramos. \277Como hacemos que nuestro programa trabaje con el conte\nido de )Tj
T*
(dichos objetos? Lo primero que se nos puede ocurrir es crear un interfaz\ que deben )Tj
T*
(cumplir los objetos )Tj
/TT2 1 Tf
(describibles)Tj
/TT0 1 Tf
(, pero ... \277que ocurre cuando esos objetos no han )Tj
T*
(sido creados por nosotros? Aqui es donde entra en juego el API Reflectio\n. )Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 192.39519 Tm
(Trabajando con clases.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 156.42508 Tm
([1] Todos los objetos en java heredan de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT0 1 Tf
( y por ello estan dotados de )Tj
T*
(un m\351todo )Tj
/TT2 1 Tf
(getClass)Tj
/TT0 1 Tf
(, cuya firma es )Tj
/TT2 1 Tf
(public final Class getClass\(\))Tj
/TT0 1 Tf
(. Este m\351todo nos devuelve un )Tj
T*
(objeto )Tj
/TT2 1 Tf
(java.lang.Class)Tj
/TT0 1 Tf
(, que va a ser nuestro punto de entrada al API Reflection. Si alguna vez\ )Tj
T*
(has cargado clases dinamicante en Java, es posible que conozcas esta cla\se por su m\351todo )Tj
/TT2 1 Tf
T*
(forName)Tj
/TT0 1 Tf
( que se utiliza para cargar e instanciar clases del classpath, pero a lo\ mejor no te has )Tj
T*
(parado a mirar otros m\351todos muy interesantes que tiene, como los sig\uientes. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 51.02507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 51.02507 Tm
(java.lang.Class forName\(String className\))Tj
/TT0 1 Tf
(: Carga una clase )Tj
/TT1 1 Tf
(del classpath)Tj
/TT0 1 Tf
( a partir de su )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(1 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj52 0 obj<</Type/Font/Encoding/WinAnsiEncoding/BaseFont/CourierNew/FirstChar 0/LastChar 255/Subtype/TrueType/FontDescriptor 53 0 R/Widthsendobj53 0 obj<</Type/FontDescriptor/FontBBox[-21 -680 638 1021]/FontName/CourierNew/Flags 34/StemV 40/CapHeight 571/XHeight 423/Ascent 1021/Descent -680/ItalicAngle 0>>endobj54 0 obj 4131endobj55 0 obj<</Length 54 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 151.96709 602 454.36707 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 151.96709 592 302.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 85.16708 ]>>BDC 
Q
10 36 592 49.16708 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 50 754.858 Tm
(nombre \(nombre completo, con todos los paquetes. Si la clase no se pued\e cargar, )Tj
0 -1.2 TD
(porque no se encuentra en el classpath, se lanzar\341 una )Tj
/TT1 1 Tf
(java.lang.)Tj
T*
(ClassNotFoundException)Tj
/TT0 1 Tf
(. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 711.65799 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 711.65799 Tm
(java.lang.reflect.Field getField\(String name\))Tj
/TT0 1 Tf
(: Devuelve un campo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a )Tj
0 -1.20068 TD
(partir de su nombre. Si la clase no contiene ning\372n campo con ese nom\bre, se )Tj
0 -1.20001 TD
(comprueban sus superclases recursivamente, y en caso de no encontrar fin\almente el )Tj
0 -1.2 TD
(campo, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchFieldException)Tj
/TT0 1 Tf
(. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 654.04976 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 654.04976 Tm
(java.lang.reflect.Field[] getFields\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los campos )Tj
/TT2 1 Tf
(p\372blicos)Tj
/TT0 1 Tf
( de )Tj
0 -1.20068 TD
(la clase, y de sus superclases. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 625.24153 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 625.24153 Tm
(java.lang.reflect.Method getMethod\(String name, Class[] parameterTypes\)\)Tj
/TT0 1 Tf
(: Devuelve un )Tj
0 -1.2 TD
(m\351todo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a partir de su nombre, y de un array con las clases de los\ )Tj
0 -1.20068 TD
(par\341metros del m\351todo. Si la clase no contiene ning\372n m\351todo\ con ese nombre y esos )Tj
0 -1.2 TD
(par\341mtetros, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchMethodException)Tj
/TT0 1 Tf
(. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 567.6333 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 567.6333 Tm
(java.lang.reflect.Method[] getMethods\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los m\351todos )Tj
/TT2 1 Tf
T*
(p\372blicos)Tj
/TT0 1 Tf
( de la clase, y de sus superclases. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 538.82507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 538.82507 Tm
(java.lang.Class[] getInterfaces\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los interfaces que )Tj
T*
(implementa la clase. )Tj
-3.33333 -2.78333 Td
([2] Vamos a ver un ejemplo muy sencillo de como utilizar de algunos de e\sos m\351todos. Primero, )Tj
T*
(necesitamos una clase sobre la que vamos a trabajar, como puede ser la s\iguiente. )Tj
/TT3 1 Tf
0 -2.55507 TD
(public class EjemploBean {)Tj
0 -1.2 TD
( )Tj
T*
(  public String nombre = "Keko";)Tj
T*
(  private String email = "keko@miservidor.es";)Tj
0 -2.39999 TD
(  private void setNombre\(String s\) {)Tj
0 -1.2 TD
(    nombre = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  protected String getNombre\(\) {)Tj
0 -1.2 TD
(    return nombre;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public void setEmail\(String s\) {)Tj
0 -1.2 TD
(    email = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public String getEmail\(\) {)Tj
0 -1.2 TD
(    return email;)Tj
T*
(  })Tj
T*
(})Tj
/TT0 1 Tf
0 -3.0116 TD
(Tambi\351n necesitamos la clase que va a realizar el trabajo, cuyo c\363\digo podemos ver a )Tj
0 -1.2 TD
(continuaci\363n. )Tj
/TT3 1 Tf
0 -2.55507 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(2 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj56 0 obj 2485endobj57 0 obj<</Length 56 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 319.60001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 319.60001 592 446.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 252.8 ]>>BDC 
Q
10 36 592 216.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 743.19717 Tm
(  public static void main\(String arg[]\) {)Tj
0 -2.39999 TD
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\)\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.println\("\\t" + metodo.getName\(\)\);)Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(    System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
([3] A continuaci\363n, si ejecutamos la clase )Tj
/TT2 1 Tf
(EjemploReflection)Tj
/TT1 1 Tf
(, el resultado que vamos a obtener )Tj
0 -1.2 TD
(es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos)Tj
0 -2.39999 TD
(        nombre)Tj
T*
(Lista de metodos)Tj
T*
(        setEmail)Tj
0 -1.2 TD
(        getEmail)Tj
T*
(        hashCode)Tj
T*
(        getClass)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        equals)Tj
T*
(        notify)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(3 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj58 0 obj 5486endobj59 0 obj<</Length 58 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 737.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 737.2 592 28.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 52.99178 ]>>BDC 
Q
10 36 592 16.99178 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 757.59718 Tm
(        notifyAll)Tj
0 -1.2 TD
(        toString)Tj
/TT1 1 Tf
0 -3.0116 TD
(\277Qu\351 ha ocurrido? \277D\363nde est\341 el campo )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(? \277Y los m\351todos )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(? \277De )Tj
0 -1.2 TD
(d\363nde han salido esos otros m\351todos \()Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc.\)? Como ya hemos dicho antes, )Tj
T*
(los m\351todos de la API Reflection nos permiten acceder a los campos y \m\351todos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
( \(por )Tj
0 -1.20068 TD
(eso no aparecen )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(\) y los m\351todos )Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc. son )Tj
0 -1.2 TD
(m\351todos de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT1 1 Tf
(, de la que hereda nuestra clase. Sencillo, \277o no? Pues )Tj
0 -1.20001 TD
(vamos a intentar complicarlo un poco m\341s, obteniendo m\341s informaci\\363n de los campos y los )Tj
0 -1.2 TD
(m\351todos. )Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 582.61987 Tm
(Trabajando con clases. Campos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 546.64977 Tm
([1] Si miramos en la API de Reflection, la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Field)Tj
/TT1 1 Tf
( podemos ver muchos )Tj
0 -1.2 TD
(m\351todos que nos van a permitir acceder a los campos de una clase, acc\eder a su valor en un )Tj
T*
(objeto determinado, e incluso modificar su valor. Vamos a ver algunos de\ ellos. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 484.44977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 484.44977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del campo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 470.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 470.04976 Tm
(public Class getType\(\))Tj
/TT1 1 Tf
(: Devuelve la clase del campo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 455.64977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 455.64977 Tm
(public Object get\(Object obj\))Tj
/TT1 1 Tf
(: Devuelve el valor del campo en un objeto. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 441.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 441.24977 Tm
(public void set\(Object obj, Object value\))Tj
/TT1 1 Tf
(: Asigna un valor al campo en un objeto. )Tj
-3.33333 -2.78333 Td
(Como podemos ver, los m\351todos )Tj
/TT2 1 Tf
(getName)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(getType)Tj
/TT1 1 Tf
( se aplican sobre la clase, pero los m\351todos )Tj
/TT2 1 Tf
T*
(get)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(set)Tj
/TT1 1 Tf
( se aplican sobre un determinado objeto. Estos m\351todos los veremos en\ el \372ltimo )Tj
T*
(apartado. )Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 341.01988 Tm
(Trabajando con clases. M\351todos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 305.04976 Tm
([1] Vamos a fijarnos ahora en la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Method)Tj
/TT1 1 Tf
(, en la que podemos encontrar, )Tj
T*
(entre otros, los siguientes m\351todos. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 257.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 257.24977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del m\351todo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 242.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 242.84976 Tm
(public Class[] getParameterTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de los par\341metros )Tj
T*
(del m\351todo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 214.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 214.04976 Tm
(public Class[] getExceptionTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de las excepciones )Tj
T*
(que puede lanzar el m\351todo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 185.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 185.24977 Tm
(public Class getReturnType\(\)\))Tj
/TT1 1 Tf
(: Devuelve la clase del valor que devuelve el m\351todo. )Tj
/T1_2 1 Tf
6 0 0 6 34.694 170.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 170.84976 Tm
(public Object invoke\(Object obj, Object[] args\))Tj
/TT1 1 Tf
(: Ejecuta el m\351todo sobre un objeto, )Tj
T*
(pas\341ndole los par\341metros necesarios, y devuelve su resultado. )Tj
-3.33333 -2.78333 Td
(Como en el caso anterior, ciertos m\351todos son aplicables directamente\ sobre la clase, mientras )Tj
T*
(que otros \(el m\351todo )Tj
/TT2 1 Tf
(invoke)Tj
/TT1 1 Tf
(\) se aplica sobre un objeto concreto. )Tj
0 -2.78334 TD
([2] Vamos a ver con un ejemplo como utilizar dichos m\351todos. )Tj
/TT0 1 Tf
0 -2.55505 TD
(import java.lang.reflect.*;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(4 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj60 0 obj 2819endobj61 0 obj<</Length 60 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 36 592 730 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 743.19717 Tm
(public class EjemploReflection2 {)Tj
0 -2.39999 TD
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
T*
(    try {)Tj
T*
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\) + " \(" + campo.ge\tType\(\).getName)Tj
T*
(\(\) + "\)"\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.print\("\\t" + metodo.getName\(\) + " \("\);)Tj
T*
( )Tj
T*
(        // Recorremos los parametros del metodo)Tj
T*
(        Class parametros[] = metodo.getParameterTypes\(\);)Tj
T*
(        for \(int j=0; j < parametros.length; j++\) {)Tj
T*
(          System.out.print\(parametros[j].getName\(\)\);)Tj
T*
(          if \(j < parametros.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
( )Tj
T*
(        System.out.print\("\) = " + metodo.getReturnType\(\).getName\(\)\\);)Tj
T*
(   )Tj
T*
(        // Recorremos las excepciones del metodo)Tj
T*
(        Class excepciones[] = metodo.getExceptionTypes\(\);)Tj
T*
(        System.out.print\(" ["\);)Tj
T*
(        for \(int j=0; j < excepciones.length; j++\) {)Tj
T*
(          System.out.print\(excepciones[j].getName\(\)\);)Tj
T*
(          if \(j < excepciones.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
(        System.out.println\("]"\);   )Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(5 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj62 0 obj 3104endobj63 0 obj<</Length 62 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 751.59998 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 751.60001 592 14.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 454.39999 602 699.20001 ]>>BDC 
Q
10 454.39999 592 244.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 222.59177 ]>>BDC 
Q
10 36 592 186.59177 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 757.59718 Tm
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Ejecutamos esta clase, y el resultado es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre \(java.lang.String\))Tj
T*
(Lista de metodos:)Tj
T*
(        setEmail \(java.lang.String\) = void [])Tj
0 -1.2 TD
(        getEmail \(\) = java.lang.String [])Tj
T*
(        hashCode \(\) = int [])Tj
T*
(        getClass \(\) = java.lang.Class [])Tj
T*
(        wait \(\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long, int\) = void [java.lang.InterruptedException])Tj
T*
(        equals \(java.lang.Object\) = boolean [])Tj
T*
(        notify \(\) = void [])Tj
T*
(        notifyAll \(\) = void [])Tj
T*
(        toString \(\) = java.lang.String [])Tj
/TT1 1 Tf
0 -3.0116 TD
(Ya tenemos una descripci\363n detallada de nuestra clase )Tj
/TT2 1 Tf
(EjemploBean)Tj
/TT1 1 Tf
(. Sin embargo, lo habitual )Tj
0 -1.2 TD
(es que queramos trabajar con objetos, y no con sus clases, utilizando lo\s m\351todos que ya )Tj
T*
(hemos visto. Vamos con ello. )Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 357.4281 Tm
(Trabajando con objetos.)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 321.45799 Tm
([1] Ya hemos visto parte de los m\351todos del API Reflection, que nos p\ermitir\355an acceder a los )Tj
T*
(campos y m\351todos de una clase, y algunos que tambi\351n nos permiten \acceder a campos y )Tj
T*
(m\351todos de un objeto concreto. Vamos a verlo con varios ejemplos. )Tj
0 -2.78333 TD
([2] Para simplificarlo un poco, vamos a ir por partes. Primero, vamos a \acceder directamente a )Tj
0 -1.2 TD
(los campos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
(, en el siguiente ejemplo. )Tj
/TT0 1 Tf
0 -2.55576 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection3 {)Tj
T*
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Object objeto;)Tj
T*
(    Field campo, campos[];)Tj
T*
(    String valor;)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(6 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj64 0 obj 3379endobj65 0 obj<</Length 64 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 304.59177 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 304.59177 592 461.40823 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 194.59177 602 252.19177 ]>>BDC 
Q
10 194.59177 592 57.60001 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 36.79176 ]>>BDC 
Q
10 36 592 0.79176 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 756.98895 Tm
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Instanciamos un objeto de la clase)Tj
0 -1.2 TD
(      try {)Tj
T*
(        objeto = clase.newInstance\(\);)Tj
T*
(  )Tj
T*
(        // Recorremos los campos)Tj
T*
(        System.out.println\("Lista de campos:\\n"\);)Tj
T*
(        campos = clase.getFields\(\);)Tj
T*
(        for \(int i=0; i < campos.length; i++\) {)Tj
T*
(          campo = campos[i];)Tj
T*
(       )Tj
T*
(          // Leemos su valor)Tj
T*
(          valor = \(String\) campo.get\(objeto\);)Tj
T*
(          System.out.println\("\\t" + campo.getName\(\) + " = " + valor \+ " \(" + )Tj
T*
(campo.getType\(\).getName\(\)+ "\)"\);)Tj
0 -2.39999 TD
(          // Cambiamos su valor)Tj
0 -1.2 TD
(          valor += " nuevo";)Tj
T*
(          campo.set\(objeto, valor\);)Tj
T*
(          System.out.println\("\\tNuevo valor: " + campo.getName\(\) + "\ = " + valor\);)Tj
T*
(        })Tj
T*
(      } catch \(InstantiationException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      } catch \(IllegalAccessException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      }    )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Este es el resultado de ejecutar la clase anterior. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre = Keko \(java.lang.String\))Tj
0 -1.2 TD
(        Nuevo valor: nombre = Keko nuevo)Tj
/TT1 1 Tf
0 -3.0116 TD
(Como se puede ver, no solo hemos podido acceder a los campos de un objet\o, sino que hemos )Tj
0 -1.2 TD
(podido modificar su valor de una forma bastante sencilla. )Tj
0 -2.78333 TD
([3] Con lo visto hasta ahora podemos acceder al contenido de los campos \p\372blicos de un objeto. )Tj
0 -1.2 TD
(Sin embargo, todos sabemos que lo usual \(y recomendable\) es que los ca\mpos de un objeto \(de )Tj
T*
(su clase\) sean privados, y que tengamos disponibles unos m\351todos acc\esores \()Tj
/TT2 1 Tf
(getters)Tj
/TT1 1 Tf
(\) y )Tj
T*
(modificadores \()Tj
/TT2 1 Tf
(setters)Tj
/TT1 1 Tf
(\) que operan sobre esos campos. Vamos a ver con un ejemplo, como )Tj
T*
(tambi\351n podemos ejecutar dichos m\351todos. )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(7 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj66 0 obj 3061endobj67 0 obj<</Length 66 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 36 592 730 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 757.59718 Tm
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection4 {)Tj
T*
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Object objeto;)Tj
T*
(    Method metGetEmail, metSetEmail;)Tj
T*
(    String resultado;)Tj
T*
(    Class[] clasesParamSetEmail;)Tj
T*
(    Object[] paramSetEmail;)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Instanciamos un objeto de la clase)Tj
0 -1.2 TD
(      try {)Tj
T*
(        objeto = clase.newInstance\(\);)Tj
0 -2.39999 TD
(        try {    )Tj
0 -1.2 TD
(          // Accedemos al metodo getEmail, sin parametros)Tj
T*
(          metGetEmail = clase.getMethod\("getEmail", null\);)Tj
T*
(          resultado = \(String\) metGetEmail.invoke\(objeto, null\);)Tj
T*
(          System.out.println\("getEmail\(\) = " + resultado\);)Tj
0 -2.39999 TD
(          // Accedemos al metodo setEmail, con un parametro \(String\))Tj
0 -1.2 TD
(          clasesParamSetEmail = new Class[1];)Tj
T*
(          clasesParamSetEmail[0] = Class.forName\("java.lang.String"\);)Tj
T*
(          metSetEmail = clase.getMethod\("setEmail", clasesParamSetEmail\\);)Tj
T*
(          paramSetEmail = new Object[1];)Tj
T*
(          paramSetEmail[0] = resultado + " nuevo";)Tj
T*
(          metSetEmail.invoke\(objeto, paramSetEmail\);)Tj
T*
(          System.out.println\("setEmail\(\)"\);)Tj
0 -2.39999 TD
(          // Volvemos a llamar al metodo getEmail, sin parametros)Tj
0 -1.2 TD
(          resultado = \(String\) metGetEmail.invoke\(objeto, null\);)Tj
T*
(          System.out.println\("getEmail\(\) = " + resultado\);)Tj
0 -2.39999 TD
(        } catch \(NoSuchMethodException e\) {)Tj
0 -1.2 TD
(          System.out.println\("Error al acceder al metodo. " + e\);)Tj
T*
(        } catch \(SecurityException e\) {)Tj
T*
(          System.out.println\("Error al acceder al metodo. " + e\);)Tj
T*
(        } catch \(InvocationTargetException e\) {)Tj
T*
(          System.out.println\("Error al ejecutar el metodo. " + e\);)Tj
T*
(        })Tj
T*
(      } catch \(InstantiationException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      } catch \(IllegalAccessException e\) {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(8 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj68 0 obj 4060endobj69 0 obj<</Length 68 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 665.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 665.2 592 100.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 569.59998 602 612.79999 ]>>BDC 
Q
10 569.60001 592 43.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 757.59718 Tm
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
0 -1.2 TD
(      } )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Y el resultado de ejecutarlo. )Tj
/TT0 1 Tf
0 -2.55507 TD
(getEmail\(\) = keko@miservidor.es)Tj
0 -1.2 TD
(setEmail\(\))Tj
T*
(getEmail\(\) = keko@miservidor.es nuevo)Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 534.82811 Tm
(Conclusi\363n )Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 498.858 Tm
([1] Hemos visto, con varios ejemplos, parte de las posibilidades del API\ Reflection )Tj
T*
(de Java. Este API es m\341s extenso de lo que aqu\355 hemos visto, pero \el objetivo de )Tj
T*
(este art\355culo es hacer un introducci\363n al API, para que cada uno i\nvestigue con )Tj
T*
(mayor profundidad cuando lo necesite. Como siempre, lo mejor para aprend\er es )Tj
T*
(leer toda la documentaci\363n[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(1)Tj
0 0 0 rg
/TT1 1 Tf
(] posible y hacer pruebas con nuestro propio c\363digo. )Tj
0 -1.36736 TD
(Espero que este art\355culo nos sirva para perder un poco el miedo a est\e potente API. )Tj
0 -2.78334 TD
([2] Me gustar\355a resaltar que los ejemplos aqui expuestos estan basado\s en un )Tj
0 -1.2 TD
(proyecto real, en el que trabaj\351 para poder facilitar los logs de obj\etos cuyo )Tj
T*
(m\351todo )Tj
/TT3 1 Tf
(toString)Tj
/TT1 1 Tf
( no daban demasiada informaci\363n. Sin embargo, por si alguno )Tj
T*
(quiere utilizarlo con el mismo fin, le recomiendo que no trate de reinve\ntar la )Tj
T*
(rueda, y que utilice la clase BeanUtils[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(2)Tj
0 0 0 rg
/TT1 1 Tf
(] de Apache Commons, cuyo m\351todo )Tj
/TT3 1 Tf
0 -1.36736 TD
(describe)Tj
/TT1 1 Tf
( hace este trabajo de una manera excelente, am\351n de muchas m\341s cos\as. )Tj
0 -2.78333 TD
([3] Por \372ltimo, no quiero finalizar este art\355culo sin hacer una \372\ltima observaci\363n. )Tj
0 -1.2 TD
(Hace poco le\355 un dicho en un libro, que dec\355a as\355: )Tj
/TT2 1 Tf
(Para un hombre con un )Tj
0 -1.20068 TD
(martillo, todo lo que ve, son clavos)Tj
/TT1 1 Tf
(. Con esto quiero decir que, si bien este API )Tj
0 -1.20068 TD
(es muy potente, no es la soluci\363n a todos los problemas, y que utiliz\arlo puede )Tj
0 -1.2 TD
(convertirse en )Tj
/TT2 1 Tf
(matar moscas a ca\361onazos)Tj
/TT1 1 Tf
(. El c\363digo creado con este API tiende )Tj
0 -1.20068 TD
(a ser bastante mas complejo que su equivalente )Tj
/TT3 1 Tf
(tradicional)Tj
/TT1 1 Tf
(, adem\341s de que su )Tj
0 -1.2 TD
(rendimiento es peor. Antes de utilizarlo, aseg\372rate de que es la mejo\r soluci\363n de )Tj
T*
(la que dispones. )Tj
0.64314 0.69804 0.77255 rg
/T1_1 1 Tf
18 0 0 18 10 145.18695 Tm
(Recursos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 109.21684 Tm
([1] Tutorial \(en ingl\351s, pero muy completo\) de Sun sobre el API Ref\lection, )Tj
0 0 0.60001 rg
(http://)Tj
0 -1.36667 TD
(java.sun.com/docs/books/tutorial/reflect/)Tj
0 0 0 rg
( )Tj
0 -2.95 TD
([2] Apache Commons BeanUtils, )Tj
0 0 0.60001 rg
(http://jakarta.apache.org/commons/beanutils/)Tj
0 0 0 rg
( )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(9 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj70 0 obj 1007endobj71 0 obj<</Length 70 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_1 1 Tf
18 0 0 18 10 747.38696 Tm
(Acerca del autor)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 711.41684 Tm
(Eneko Gonz\341lez Benito \(Keko\))Tj
0 -1.2 TD
(Eneko lleva varios a\361os programando en Java, y actualmente trabaja co\n Java en una )Tj
T*
(consultor\355a en Bilbao. El poco tiempo libre que le deja el trabajo, s\e dedica a practicar deportes )Tj
T*
(\(senderismo, futbol, frontenis entre otros\) y a leer todo lo que pasa \por sus manos.)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(10 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj72 0 obj(IntroducciÛn al API Reflection \(ReflexiÛn\) de Java.)endobj73 0 obj<</C 77 0 R/V 1.25>>endobj74 0 obj<</S 75 0 R/URL(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/reflection.html)>>endobj75 0 obj<</G 76 0 R>>endobj76 0 obj<</PS[792.0 612.0]/M[10.080002 10.080002 26.0 36.0]/S 0/AS 1/PO 0/AT 70/AH 0/AL 0/CB 0/SU 1>>endobj77 0 obj[74 0 R]endobj78 0 obj(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/reflection.html)endobj79 0 obj(‡|†≤ı˚8m§Ã∑—<)endobj80 0 obj<</ID 79 0 R/O[10 0 R 13 0 R 15 0 R 17 0 R 19 0 R 21 0 R 23 0 R 25 0 R 27 0 R 39 0 R]/S/SPS/T 72 0 R/CT(text/html)/SI 81 0 R/TID 82 0 R/TS(D:20040812060149)>>endobj81 0 obj<</AU 78 0 R/TS(D:20040812060149)>>endobj82 0 obj(>∆>ÕáåxUÏoTø'U0Y)endobj83 0 obj<</Names[79 0 R 80 0 R]>>endobj84 0 obj<</Names[78 0 R 80 0 R]>>endobj85 0 obj<</Count 1/Parent 5 0 R/First 86 0 R/Last 86 0 R/Title(Local Disk)>>endobj86 0 obj<</Parent 85 0 R/Dest[10 0 R/XYZ 0 792 null]/Title(IntroducciÛn al API Reflection \(ReflexiÛn\) de Java.)/SE 9 0 R>>endobj87 0 obj<</Length 3275/Type/Metadata/Subtype/XML>>stream
<?xpacket begin='Ôªø' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:bd4c929d-2efb-46e9-ad3b-b9d4b6cb83e3' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Web Capture 6.0'></rdf:Description>
<rdf:Description rdf:about='uuid:bd4c929d-2efb-46e9-ad3b-b9d4b6cb83e3' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2004-08-12T08:01:49+02:00' xap:CreateDate='2004-08-12T08:01:46Z' xap:MetadataDate='2004-08-12T08:01:49+02:00'></rdf:Description>
<rdf:Description rdf:about='uuid:bd4c929d-2efb-46e9-ad3b-b9d4b6cb83e3' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:bdd38f88-7e9e-42d3-9442-d89e1dc561d5'/>
<rdf:Description rdf:about='uuid:bd4c929d-2efb-46e9-ad3b-b9d4b6cb83e3' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>Introducci√≥n al API Reflection (Reflexi√≥n) de Java.</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end='w'?>
endstreamendobjxref
0 88
0000000004 65535 f
0000000016 00000 n
0000000143 00000 n
0000000258 00000 n
0000000000 00001 f
0000000437 00000 n
0000000503 00000 n
0000000604 00000 n
0000000648 00000 n
0000000694 00000 n
0000001026 00000 n
0000001252 00000 n
0000001368 00000 n
0000001391 00000 n
0000001616 00000 n
0000001639 00000 n
0000001841 00000 n
0000001864 00000 n
0000002101 00000 n
0000002124 00000 n
0000002304 00000 n
0000002327 00000 n
0000002552 00000 n
0000002575 00000 n
0000002777 00000 n
0000002800 00000 n
0000002980 00000 n
0000003003 00000 n
0000003242 00000 n
0000003265 00000 n
0000003543 00000 n
0000003595 00000 n
0000003873 00000 n
0000003929 00000 n
0000004023 00000 n
0000004069 00000 n
0000004259 00000 n
0000004440 00000 n
0000004485 00000 n
0000004669 00000 n
0000004861 00000 n
0000004884 00000 n
0000004974 00000 n
0000005067 00000 n
0000006277 00000 n
0000006446 00000 n
0000007664 00000 n
0000007839 00000 n
0000009056 00000 n
0000009235 00000 n
0000009301 00000 n
0000009322 00000 n
0000013831 00000 n
0000015002 00000 n
0000015173 00000 n
0000015194 00000 n
0000019379 00000 n
0000019400 00000 n
0000021939 00000 n
0000021960 00000 n
0000027500 00000 n
0000027521 00000 n
0000030394 00000 n
0000030415 00000 n
0000033573 00000 n
0000033594 00000 n
0000037027 00000 n
0000037048 00000 n
0000040163 00000 n
0000040184 00000 n
0000044298 00000 n
0000044319 00000 n
0000045380 00000 n
0000045451 00000 n
0000045487 00000 n
0000045605 00000 n
0000045634 00000 n
0000045743 00000 n
0000045767 00000 n
0000045868 00000 n
0000045902 00000 n
0000046076 00000 n
0000046127 00000 n
0000046161 00000 n
0000046202 00000 n
0000046243 00000 n
0000046327 00000 n
0000046459 00000 n
trailer
<</Size 88/Root 1 0 R/Info 3 0 R/ID[<f492475962ac6b4f9d02abe507e12cfd><bf994bd6fa82294e961a5364c74bdeb5>]>>
startxref
49812
%%EOF
1 0 obj<</Pages 2 0 R/Outlines 5 0 R/Type/Catalog/Names 32 0 R/StructTreeRoot 6 0 R/Metadata 140 0 R/SpiderInfo 73 0 R>>endobj3 0 obj<</ModDate(D:20040812080405+02'00')/CreationDate(D:20040812080146Z)/Title(IntroducciÛn al API Reflection \(ReflexiÛn\) de Java.)/Producer(Acrobat Web Capture 6.0)>>endobj10 0 obj<</ID 79 0 R/Contents 107 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 42 0 R/T1_1 49 0 R/TT0 43 0 R/TT1 45 0 R/TT2 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 0>>endobj13 0 obj<</ID 79 0 R/Contents 111 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 49 0 R/TT0 43 0 R/TT1 47 0 R/TT2 45 0 R/TT3 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 1>>endobj15 0 obj<</ID 79 0 R/Contents 115 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 52 0 R/TT1 43 0 R/TT2 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 2>>endobj17 0 obj<</ID 79 0 R/Contents 119 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 42 0 R/T1_1 49 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R/TT3 45 0 R>>/ProcSet[/PDF/Text]>>/StructParents 3>>endobj19 0 obj<</ID 79 0 R/Contents 123 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 4>>endobj21 0 obj<</ID 79 0 R/Contents 127 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 42 0 R/TT0 52 0 R/TT1 43 0 R/TT2 47 0 R/TT3 45 0 R>>/ProcSet[/PDF/Text]>>/StructParents 5>>endobj23 0 obj<</ID 79 0 R/Contents 131 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 52 0 R/TT1 43 0 R/TT2 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 6>>endobj25 0 obj<</ID 79 0 R/Contents 133 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 41 0 R/TT0 52 0 R>>/ProcSet[/PDF/Text]>>/StructParents 7>>endobj27 0 obj<</ID 79 0 R/Annots 30 0 R/Contents 137 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 42 0 R/TT0 52 0 R/TT1 43 0 R/TT2 45 0 R/TT3 47 0 R>>/ProcSet[/PDF/Text]>>/StructParents 8>>endobj39 0 obj<</ID 79 0 R/Contents 139 0 R/Type/Page/Parent 2 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</T1_0 42 0 R/T1_1 41 0 R/TT0 43 0 R>>/ProcSet[/PDF/Text]>>/StructParents 9>>endobj88 0 obj 4385endobj89 0 obj<</Length 88 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [12 557.17529 600 606.37531 ]>>BDC 
Q
0 0 0 rg
0 i 
12 557.17529 588 49.2 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [13 558.17529 599 605.37531 ]>>BDC 
Q
1 1 1 rg
13 558.17529 586 47.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 20 0 0 20 10 729.47565 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 692.85803 Tm
(Fecha de creaci\363n: )Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(Revisi\363n )Tj
/TT1 1 Tf
(1.0)Tj
/TT0 1 Tf
( \()Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
(\) )Tj
/TT1 1 Tf
0 -2.78403 TD
(Eneko Gonz\341lez Benito \(Keko\))Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(enekog AT euskalnet DOT net)Tj
/TT2 1 Tf
0.41667 -3.2 Td
(Copyright \(c\) 2004, Eneko Gonz\341lez Benito. Este documento puede ser\ distribuido solo bajo los )Tj
0 -1.2 TD
(t\351rminos y condiciones de la licencia de Documentaci\363n de javaHisp\ano v1.0 o posterior \(la )Tj
T*
(\372ltima versi\363n se encuentra en http://www.javahispano.org/licencia\s/\).)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 520.40338 Tm
(Introducci\363n )Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 50 484.43329 Tm
([1] El API Reflection es una herramienta muy poderosa que nos permite re\alizar en )Tj
T*
(Java cosas que en otros lenguajes es imposible. Sin embargo, y a pesar d\e su )Tj
T*
(potencial, es un API bastante desconocido, sobre todo para los principia\ntes en el )Tj
T*
(mundo Java. A lo largo de este \341rticulo, vamos a intentar comprender \las )Tj
T*
(posibilidades que nos ofrece este API, introduci\351ndonos poco a poco e\n su uso.)Tj
0 -2.78333 TD
([2] Todos sabemos que un buen dise\361o es )Tj
/TT1 1 Tf
(muy importante)Tj
/TT0 1 Tf
( \(si no imprescindible\) )Tj
0 -1.20068 TD
(en cualquier programa. Para ello, estamos acostumbrados a utilizar heren\cia, )Tj
0 -1.2 TD
(interfaces, etc. en nuestros programas. Sin embargo, la infinita varieda\d de )Tj
T*
(problemas a los que no podemos tener que enfrentar, hace que estas t\351\cnicas no )Tj
T*
(siempre sean suficientes para nuestros prop\363sitos.)Tj
0 -2.78333 TD
([3] Pongamos, por ejemplo, que estamos trabajando en un programa que nos\ )Tj
0 -1.2 TD
(ayude a )Tj
/TT2 1 Tf
(debuggear)Tj
/TT0 1 Tf
( otros programas, describiendo el contenido de cualquier objeto )Tj
T*
(que queramos. \277Como hacemos que nuestro programa trabaje con el conte\nido de )Tj
T*
(dichos objetos? Lo primero que se nos puede ocurrir es crear un interfaz\ que deben )Tj
T*
(cumplir los objetos )Tj
/TT2 1 Tf
(describibles)Tj
/TT0 1 Tf
(, pero ... \277que ocurre cuando esos objetos no han )Tj
T*
(sido creados por nosotros? Aqui es donde entra en juego el API Reflectio\n. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 192.39519 Tm
(Trabajando con clases.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 156.42508 Tm
([1] Todos los objetos en java heredan de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT0 1 Tf
( y por ello estan dotados de )Tj
T*
(un m\351todo )Tj
/TT2 1 Tf
(getClass)Tj
/TT0 1 Tf
(, cuya firma es )Tj
/TT2 1 Tf
(public final Class getClass\(\))Tj
/TT0 1 Tf
(. Este m\351todo nos devuelve un )Tj
T*
(objeto )Tj
/TT2 1 Tf
(java.lang.Class)Tj
/TT0 1 Tf
(, que va a ser nuestro punto de entrada al API Reflection. Si alguna vez\ )Tj
T*
(has cargado clases dinamicante en Java, es posible que conozcas esta cla\se por su m\351todo )Tj
/TT2 1 Tf
T*
(forName)Tj
/TT0 1 Tf
( que se utiliza para cargar e instanciar clases del classpath, pero a lo\ mejor no te has )Tj
T*
(parado a mirar otros m\351todos muy interesantes que tiene, como los sig\uientes. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 51.02507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 51.02507 Tm
(java.lang.Class forName\(String className\))Tj
/TT0 1 Tf
(: Carga una clase )Tj
/TT1 1 Tf
(del classpath)Tj
/TT0 1 Tf
( a partir de su )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_2 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(1 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj90 0 obj 4191endobj91 0 obj<</Length 90 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [12 557.17529 600 606.37531 ]>>BDC 
Q
0 0 0 rg
0 i 
12 557.17529 588 49.2 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [13 558.17529 599 605.37531 ]>>BDC 
Q
1 1 1 rg
13 558.17529 586 47.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 20 0 0 20 10 729.47565 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 692.85803 Tm
(Fecha de creaci\363n: )Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(Revisi\363n )Tj
/TT1 1 Tf
(1.0)Tj
/TT0 1 Tf
( \()Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
(\) )Tj
/TT1 1 Tf
0 -2.78403 TD
(Eneko Gonz\341lez Benito \(Keko\))Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(enekog AT euskalnet DOT net)Tj
/TT2 1 Tf
0.41667 -3.2 Td
(Copyright \(c\) 2004, Eneko Gonz\341lez Benito. Este documento puede ser\ distribuido solo bajo los )Tj
0 -1.2 TD
(t\351rminos y condiciones de la licencia de Documentaci\363n de javaHisp\ano v1.0 o posterior \(la )Tj
T*
(\372ltima versi\363n se encuentra en http://www.javahispano.org/licencia\s/\).)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 520.40338 Tm
(Introducci\363n )Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 50 484.43329 Tm
([1] El API Reflection es una herramienta muy poderosa que nos permite re\alizar en )Tj
T*
(Java cosas que en otros lenguajes es imposible. Sin embargo, y a pesar d\e su )Tj
T*
(potencial, es un API bastante desconocido, sobre todo para los principia\ntes en el )Tj
T*
(mundo Java. A lo largo de este \341rticulo, vamos a intentar comprender \las )Tj
T*
(posibilidades que nos ofrece este API, introduci\351ndonos poco a poco e\n su uso.)Tj
0 -2.78333 TD
([2] Todos sabemos que un buen dise\361o es )Tj
/TT1 1 Tf
(muy importante)Tj
/TT0 1 Tf
( \(si no imprescindible\) )Tj
0 -1.20068 TD
(en cualquier programa. Para ello, estamos acostumbrados a utilizar heren\cia, )Tj
0 -1.2 TD
(interfaces, etc. en nuestros programas. Sin embargo, la infinita varieda\d de )Tj
T*
(problemas a los que no podemos tener que enfrentar, hace que estas t\351\cnicas no )Tj
T*
(siempre sean suficientes para nuestros prop\363sitos.)Tj
0 -2.78333 TD
([3] Pongamos, por ejemplo, que estamos trabajando en un programa que nos\ )Tj
0 -1.2 TD
(ayude a )Tj
/TT2 1 Tf
(debuggear)Tj
/TT0 1 Tf
( otros programas, describiendo el contenido de cualquier objeto )Tj
T*
(que queramos. \277Como hacemos que nuestro programa trabaje con el conte\nido de )Tj
T*
(dichos objetos? Lo primero que se nos puede ocurrir es crear un interfaz\ que deben )Tj
T*
(cumplir los objetos )Tj
/TT2 1 Tf
(describibles)Tj
/TT0 1 Tf
(, pero ... \277que ocurre cuando esos objetos no han )Tj
T*
(sido creados por nosotros? Aqui es donde entra en juego el API Reflectio\n. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 192.39519 Tm
(Trabajando con clases.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 156.42508 Tm
([1] Todos los objetos en java heredan de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT0 1 Tf
( y por ello estan dotados de )Tj
T*
(un m\351todo )Tj
/TT2 1 Tf
(getClass)Tj
/TT0 1 Tf
(, cuya firma es )Tj
/TT2 1 Tf
(public final Class getClass\(\))Tj
/TT0 1 Tf
(. Este m\351todo nos devuelve un )Tj
T*
(objeto )Tj
/TT2 1 Tf
(java.lang.Class)Tj
/TT0 1 Tf
(, que va a ser nuestro punto de entrada al API Reflection. Si alguna vez\ )Tj
T*
(has cargado clases dinamicante en Java, es posible que conozcas esta cla\se por su m\351todo )Tj
/TT2 1 Tf
T*
(forName)Tj
/TT0 1 Tf
( que se utiliza para cargar e instanciar clases del classpath, pero a lo\ mejor no te has )Tj
T*
(parado a mirar otros m\351todos muy interesantes que tiene, como los sig\uientes. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 51.02507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 51.02507 Tm
(java.lang.Class forName\(String className\))Tj
/TT0 1 Tf
(: Carga una clase )Tj
/TT1 1 Tf
(del classpath)Tj
/TT0 1 Tf
( a partir de su )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj92 0 obj 4051endobj93 0 obj<</Length 92 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 151.96709 602 454.36707 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 151.96709 592 302.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 85.16708 ]>>BDC 
Q
10 36 592 49.16708 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 50 754.85803 Tm
(nombre \(nombre completo, con todos los paquetes. Si la clase no se pued\e cargar, )Tj
0 -1.2 TD
(porque no se encuentra en el classpath, se lanzar\341 una )Tj
/TT1 1 Tf
(java.lang.)Tj
T*
(ClassNotFoundException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 711.65796 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 711.65796 Tm
(java.lang.reflect.Field getField\(String name\))Tj
/TT0 1 Tf
(: Devuelve un campo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a )Tj
0 -1.20068 TD
(partir de su nombre. Si la clase no contiene ning\372n campo con ese nom\bre, se )Tj
0 -1.20001 TD
(comprueban sus superclases recursivamente, y en caso de no encontrar fin\almente el )Tj
0 -1.2 TD
(campo, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchFieldException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 654.04974 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 654.04974 Tm
(java.lang.reflect.Field[] getFields\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los campos )Tj
/TT2 1 Tf
(p\372blicos)Tj
/TT0 1 Tf
( de )Tj
0 -1.20068 TD
(la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 625.24152 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 625.24152 Tm
(java.lang.reflect.Method getMethod\(String name, Class[] parameterTypes\)\)Tj
/TT0 1 Tf
(: Devuelve un )Tj
0 -1.2 TD
(m\351todo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a partir de su nombre, y de un array con las clases de los\ )Tj
0 -1.20068 TD
(par\341metros del m\351todo. Si la clase no contiene ning\372n m\351todo\ con ese nombre y esos )Tj
0 -1.2 TD
(par\341mtetros, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchMethodException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 567.6333 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 567.6333 Tm
(java.lang.reflect.Method[] getMethods\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los m\351todos )Tj
/TT2 1 Tf
T*
(p\372blicos)Tj
/TT0 1 Tf
( de la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 538.82507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 538.82507 Tm
(java.lang.Class[] getInterfaces\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los interfaces que )Tj
T*
(implementa la clase. )Tj
-3.33333 -2.78333 Td
([2] Vamos a ver un ejemplo muy sencillo de como utilizar de algunos de e\sos m\351todos. Primero, )Tj
T*
(necesitamos una clase sobre la que vamos a trabajar, como puede ser la s\iguiente. )Tj
/TT3 1 Tf
0 -2.55507 TD
(public class EjemploBean {)Tj
0 -1.2 TD
( )Tj
T*
(  public String nombre = "Keko";)Tj
T*
(  private String email = "keko@miservidor.es";)Tj
0 -2.39999 TD
(  private void setNombre\(String s\) {)Tj
0 -1.2 TD
(    nombre = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  protected String getNombre\(\) {)Tj
0 -1.2 TD
(    return nombre;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public void setEmail\(String s\) {)Tj
0 -1.2 TD
(    email = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public String getEmail\(\) {)Tj
0 -1.2 TD
(    return email;)Tj
T*
(  })Tj
T*
(})Tj
/TT0 1 Tf
0 -3.0116 TD
(Tambi\351n necesitamos la clase que va a realizar el trabajo, cuyo c\363\digo podemos ver a )Tj
0 -1.2 TD
(continuaci\363n. )Tj
/TT3 1 Tf
0 -2.55507 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_1 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(2 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj94 0 obj 3857endobj95 0 obj<</Length 94 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 151.96709 602 454.36707 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 151.96709 592 302.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 85.16708 ]>>BDC 
Q
10 36 592 49.16708 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 50 754.85803 Tm
(nombre \(nombre completo, con todos los paquetes. Si la clase no se pued\e cargar, )Tj
0 -1.2 TD
(porque no se encuentra en el classpath, se lanzar\341 una )Tj
/TT1 1 Tf
(java.lang.)Tj
T*
(ClassNotFoundException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 711.65796 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 711.65796 Tm
(java.lang.reflect.Field getField\(String name\))Tj
/TT0 1 Tf
(: Devuelve un campo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a )Tj
0 -1.20068 TD
(partir de su nombre. Si la clase no contiene ning\372n campo con ese nom\bre, se )Tj
0 -1.20001 TD
(comprueban sus superclases recursivamente, y en caso de no encontrar fin\almente el )Tj
0 -1.2 TD
(campo, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchFieldException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 654.04974 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 654.04974 Tm
(java.lang.reflect.Field[] getFields\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los campos )Tj
/TT2 1 Tf
(p\372blicos)Tj
/TT0 1 Tf
( de )Tj
0 -1.20068 TD
(la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 625.24152 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 625.24152 Tm
(java.lang.reflect.Method getMethod\(String name, Class[] parameterTypes\)\)Tj
/TT0 1 Tf
(: Devuelve un )Tj
0 -1.2 TD
(m\351todo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a partir de su nombre, y de un array con las clases de los\ )Tj
0 -1.20068 TD
(par\341metros del m\351todo. Si la clase no contiene ning\372n m\351todo\ con ese nombre y esos )Tj
0 -1.2 TD
(par\341mtetros, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchMethodException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 567.6333 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 567.6333 Tm
(java.lang.reflect.Method[] getMethods\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los m\351todos )Tj
/TT2 1 Tf
T*
(p\372blicos)Tj
/TT0 1 Tf
( de la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 538.82507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 538.82507 Tm
(java.lang.Class[] getInterfaces\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los interfaces que )Tj
T*
(implementa la clase. )Tj
-3.33333 -2.78333 Td
([2] Vamos a ver un ejemplo muy sencillo de como utilizar de algunos de e\sos m\351todos. Primero, )Tj
T*
(necesitamos una clase sobre la que vamos a trabajar, como puede ser la s\iguiente. )Tj
/TT3 1 Tf
0 -2.55507 TD
(public class EjemploBean {)Tj
0 -1.2 TD
( )Tj
T*
(  public String nombre = "Keko";)Tj
T*
(  private String email = "keko@miservidor.es";)Tj
0 -2.39999 TD
(  private void setNombre\(String s\) {)Tj
0 -1.2 TD
(    nombre = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  protected String getNombre\(\) {)Tj
0 -1.2 TD
(    return nombre;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public void setEmail\(String s\) {)Tj
0 -1.2 TD
(    email = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public String getEmail\(\) {)Tj
0 -1.2 TD
(    return email;)Tj
T*
(  })Tj
T*
(})Tj
/TT0 1 Tf
0 -3.0116 TD
(Tambi\351n necesitamos la clase que va a realizar el trabajo, cuyo c\363\digo podemos ver a )Tj
0 -1.2 TD
(continuaci\363n. )Tj
/TT3 1 Tf
0 -2.55507 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj96 0 obj 2403endobj97 0 obj<</Length 96 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 319.60001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 319.60001 592 446.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 252.8 ]>>BDC 
Q
10 36 592 216.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(  public static void main\(String arg[]\) {)Tj
0 -2.39999 TD
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\)\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.println\("\\t" + metodo.getName\(\)\);)Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(    System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
([3] A continuaci\363n, si ejecutamos la clase )Tj
/TT2 1 Tf
(EjemploReflection)Tj
/TT1 1 Tf
(, el resultado que vamos a obtener )Tj
0 -1.2 TD
(es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos)Tj
0 -2.39999 TD
(        nombre)Tj
T*
(Lista de metodos)Tj
T*
(        setEmail)Tj
0 -1.2 TD
(        getEmail)Tj
T*
(        hashCode)Tj
T*
(        getClass)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        equals)Tj
T*
(        notify)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(3 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj98 0 obj 2209endobj99 0 obj<</Length 98 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 319.60001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 319.60001 592 446.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 252.8 ]>>BDC 
Q
10 36 592 216.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(  public static void main\(String arg[]\) {)Tj
0 -2.39999 TD
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\)\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.println\("\\t" + metodo.getName\(\)\);)Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(    System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
([3] A continuaci\363n, si ejecutamos la clase )Tj
/TT2 1 Tf
(EjemploReflection)Tj
/TT1 1 Tf
(, el resultado que vamos a obtener )Tj
0 -1.2 TD
(es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos)Tj
0 -2.39999 TD
(        nombre)Tj
T*
(Lista de metodos)Tj
T*
(        setEmail)Tj
0 -1.2 TD
(        getEmail)Tj
T*
(        hashCode)Tj
T*
(        getClass)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        equals)Tj
T*
(        notify)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj100 0 obj 5401endobj101 0 obj<</Length 100 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 737.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 737.20001 592 28.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 52.99178 ]>>BDC 
Q
10 36 592 16.99178 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        notifyAll)Tj
0 -1.2 TD
(        toString)Tj
/TT1 1 Tf
0 -3.0116 TD
(\277Qu\351 ha ocurrido? \277D\363nde est\341 el campo )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(? \277Y los m\351todos )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(? \277De )Tj
0 -1.2 TD
(d\363nde han salido esos otros m\351todos \()Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc.\)? Como ya hemos dicho antes, )Tj
T*
(los m\351todos de la API Reflection nos permiten acceder a los campos y \m\351todos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
( \(por )Tj
0 -1.20068 TD
(eso no aparecen )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(\) y los m\351todos )Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc. son )Tj
0 -1.2 TD
(m\351todos de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT1 1 Tf
(, de la que hereda nuestra clase. Sencillo, \277o no? Pues )Tj
0 -1.20001 TD
(vamos a intentar complicarlo un poco m\341s, obteniendo m\341s informaci\\363n de los campos y los )Tj
0 -1.2 TD
(m\351todos. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 582.61987 Tm
(Trabajando con clases. Campos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 546.64978 Tm
([1] Si miramos en la API de Reflection, la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Field)Tj
/TT1 1 Tf
( podemos ver muchos )Tj
T*
(m\351todos que nos van a permitir acceder a los campos de una clase, acc\eder a su valor en un )Tj
T*
(objeto determinado, e incluso modificar su valor. Vamos a ver algunos de\ ellos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 484.44977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 484.44977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 470.04974 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 470.04974 Tm
(public Class getType\(\))Tj
/TT1 1 Tf
(: Devuelve la clase del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 455.64975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 455.64975 Tm
(public Object get\(Object obj\))Tj
/TT1 1 Tf
(: Devuelve el valor del campo en un objeto. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 441.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 441.24976 Tm
(public void set\(Object obj, Object value\))Tj
/TT1 1 Tf
(: Asigna un valor al campo en un objeto. )Tj
-3.33333 -2.78333 Td
(Como podemos ver, los m\351todos )Tj
/TT2 1 Tf
(getName)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(getType)Tj
/TT1 1 Tf
( se aplican sobre la clase, pero los m\351todos )Tj
/TT2 1 Tf
T*
(get)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(set)Tj
/TT1 1 Tf
( se aplican sobre un determinado objeto. Estos m\351todos los veremos en\ el \372ltimo )Tj
T*
(apartado. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 341.01987 Tm
(Trabajando con clases. M\351todos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 305.04974 Tm
([1] Vamos a fijarnos ahora en la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Method)Tj
/TT1 1 Tf
(, en la que podemos encontrar, )Tj
T*
(entre otros, los siguientes m\351todos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 257.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 257.24976 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 242.84975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 242.84975 Tm
(public Class[] getParameterTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de los par\341metros )Tj
T*
(del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 214.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 214.04976 Tm
(public Class[] getExceptionTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de las excepciones )Tj
T*
(que puede lanzar el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 185.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 185.24977 Tm
(public Class getReturnType\(\)\))Tj
/TT1 1 Tf
(: Devuelve la clase del valor que devuelve el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 170.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 170.84976 Tm
(public Object invoke\(Object obj, Object[] args\))Tj
/TT1 1 Tf
(: Ejecuta el m\351todo sobre un objeto, )Tj
T*
(pas\341ndole los par\341metros necesarios, y devuelve su resultado. )Tj
-3.33333 -2.78333 Td
(Como en el caso anterior, ciertos m\351todos son aplicables directamente\ sobre la clase, mientras )Tj
T*
(que otros \(el m\351todo )Tj
/TT2 1 Tf
(invoke)Tj
/TT1 1 Tf
(\) se aplica sobre un objeto concreto. )Tj
0 -2.78334 TD
([2] Vamos a ver con un ejemplo como utilizar dichos m\351todos. )Tj
/TT0 1 Tf
0 -2.55505 TD
(import java.lang.reflect.*;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_2 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(4 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj102 0 obj 5207endobj103 0 obj<</Length 102 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 737.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 737.20001 592 28.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 52.99178 ]>>BDC 
Q
10 36 592 16.99178 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        notifyAll)Tj
0 -1.2 TD
(        toString)Tj
/TT1 1 Tf
0 -3.0116 TD
(\277Qu\351 ha ocurrido? \277D\363nde est\341 el campo )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(? \277Y los m\351todos )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(? \277De )Tj
0 -1.2 TD
(d\363nde han salido esos otros m\351todos \()Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc.\)? Como ya hemos dicho antes, )Tj
T*
(los m\351todos de la API Reflection nos permiten acceder a los campos y \m\351todos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
( \(por )Tj
0 -1.20068 TD
(eso no aparecen )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(\) y los m\351todos )Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc. son )Tj
0 -1.2 TD
(m\351todos de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT1 1 Tf
(, de la que hereda nuestra clase. Sencillo, \277o no? Pues )Tj
0 -1.20001 TD
(vamos a intentar complicarlo un poco m\341s, obteniendo m\341s informaci\\363n de los campos y los )Tj
0 -1.2 TD
(m\351todos. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 582.61987 Tm
(Trabajando con clases. Campos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 546.64978 Tm
([1] Si miramos en la API de Reflection, la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Field)Tj
/TT1 1 Tf
( podemos ver muchos )Tj
T*
(m\351todos que nos van a permitir acceder a los campos de una clase, acc\eder a su valor en un )Tj
T*
(objeto determinado, e incluso modificar su valor. Vamos a ver algunos de\ ellos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 484.44977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 484.44977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 470.04974 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 470.04974 Tm
(public Class getType\(\))Tj
/TT1 1 Tf
(: Devuelve la clase del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 455.64975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 455.64975 Tm
(public Object get\(Object obj\))Tj
/TT1 1 Tf
(: Devuelve el valor del campo en un objeto. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 441.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 441.24976 Tm
(public void set\(Object obj, Object value\))Tj
/TT1 1 Tf
(: Asigna un valor al campo en un objeto. )Tj
-3.33333 -2.78333 Td
(Como podemos ver, los m\351todos )Tj
/TT2 1 Tf
(getName)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(getType)Tj
/TT1 1 Tf
( se aplican sobre la clase, pero los m\351todos )Tj
/TT2 1 Tf
T*
(get)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(set)Tj
/TT1 1 Tf
( se aplican sobre un determinado objeto. Estos m\351todos los veremos en\ el \372ltimo )Tj
T*
(apartado. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 341.01987 Tm
(Trabajando con clases. M\351todos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 305.04974 Tm
([1] Vamos a fijarnos ahora en la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Method)Tj
/TT1 1 Tf
(, en la que podemos encontrar, )Tj
T*
(entre otros, los siguientes m\351todos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 257.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 257.24976 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 242.84975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 242.84975 Tm
(public Class[] getParameterTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de los par\341metros )Tj
T*
(del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 214.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 214.04976 Tm
(public Class[] getExceptionTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de las excepciones )Tj
T*
(que puede lanzar el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 185.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 185.24977 Tm
(public Class getReturnType\(\)\))Tj
/TT1 1 Tf
(: Devuelve la clase del valor que devuelve el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 170.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 170.84976 Tm
(public Object invoke\(Object obj, Object[] args\))Tj
/TT1 1 Tf
(: Ejecuta el m\351todo sobre un objeto, )Tj
T*
(pas\341ndole los par\341metros necesarios, y devuelve su resultado. )Tj
-3.33333 -2.78333 Td
(Como en el caso anterior, ciertos m\351todos son aplicables directamente\ sobre la clase, mientras )Tj
T*
(que otros \(el m\351todo )Tj
/TT2 1 Tf
(invoke)Tj
/TT1 1 Tf
(\) se aplica sobre un objeto concreto. )Tj
0 -2.78334 TD
([2] Vamos a ver con un ejemplo como utilizar dichos m\351todos. )Tj
/TT0 1 Tf
0 -2.55505 TD
(import java.lang.reflect.*;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj104 0 obj 4385endobj105 0 obj<</Length 104 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [12 557.17529 600 606.37531 ]>>BDC 
Q
0 0 0 rg
0 i 
12 557.17529 588 49.2 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [13 558.17529 599 605.37531 ]>>BDC 
Q
1 1 1 rg
13 558.17529 586 47.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 20 0 0 20 10 729.47565 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 692.85803 Tm
(Fecha de creaci\363n: )Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(Revisi\363n )Tj
/TT1 1 Tf
(1.0)Tj
/TT0 1 Tf
( \()Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
(\) )Tj
/TT1 1 Tf
0 -2.78403 TD
(Eneko Gonz\341lez Benito \(Keko\))Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(enekog AT euskalnet DOT net)Tj
/TT2 1 Tf
0.41667 -3.2 Td
(Copyright \(c\) 2004, Eneko Gonz\341lez Benito. Este documento puede ser\ distribuido solo bajo los )Tj
0 -1.2 TD
(t\351rminos y condiciones de la licencia de Documentaci\363n de javaHisp\ano v1.0 o posterior \(la )Tj
T*
(\372ltima versi\363n se encuentra en http://www.javahispano.org/licencia\s/\).)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 520.40338 Tm
(Introducci\363n )Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 50 484.43329 Tm
([1] El API Reflection es una herramienta muy poderosa que nos permite re\alizar en )Tj
T*
(Java cosas que en otros lenguajes es imposible. Sin embargo, y a pesar d\e su )Tj
T*
(potencial, es un API bastante desconocido, sobre todo para los principia\ntes en el )Tj
T*
(mundo Java. A lo largo de este \341rticulo, vamos a intentar comprender \las )Tj
T*
(posibilidades que nos ofrece este API, introduci\351ndonos poco a poco e\n su uso.)Tj
0 -2.78333 TD
([2] Todos sabemos que un buen dise\361o es )Tj
/TT1 1 Tf
(muy importante)Tj
/TT0 1 Tf
( \(si no imprescindible\) )Tj
0 -1.20068 TD
(en cualquier programa. Para ello, estamos acostumbrados a utilizar heren\cia, )Tj
0 -1.2 TD
(interfaces, etc. en nuestros programas. Sin embargo, la infinita varieda\d de )Tj
T*
(problemas a los que no podemos tener que enfrentar, hace que estas t\351\cnicas no )Tj
T*
(siempre sean suficientes para nuestros prop\363sitos.)Tj
0 -2.78333 TD
([3] Pongamos, por ejemplo, que estamos trabajando en un programa que nos\ )Tj
0 -1.2 TD
(ayude a )Tj
/TT2 1 Tf
(debuggear)Tj
/TT0 1 Tf
( otros programas, describiendo el contenido de cualquier objeto )Tj
T*
(que queramos. \277Como hacemos que nuestro programa trabaje con el conte\nido de )Tj
T*
(dichos objetos? Lo primero que se nos puede ocurrir es crear un interfaz\ que deben )Tj
T*
(cumplir los objetos )Tj
/TT2 1 Tf
(describibles)Tj
/TT0 1 Tf
(, pero ... \277que ocurre cuando esos objetos no han )Tj
T*
(sido creados por nosotros? Aqui es donde entra en juego el API Reflectio\n. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 192.39519 Tm
(Trabajando con clases.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 156.42508 Tm
([1] Todos los objetos en java heredan de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT0 1 Tf
( y por ello estan dotados de )Tj
T*
(un m\351todo )Tj
/TT2 1 Tf
(getClass)Tj
/TT0 1 Tf
(, cuya firma es )Tj
/TT2 1 Tf
(public final Class getClass\(\))Tj
/TT0 1 Tf
(. Este m\351todo nos devuelve un )Tj
T*
(objeto )Tj
/TT2 1 Tf
(java.lang.Class)Tj
/TT0 1 Tf
(, que va a ser nuestro punto de entrada al API Reflection. Si alguna vez\ )Tj
T*
(has cargado clases dinamicante en Java, es posible que conozcas esta cla\se por su m\351todo )Tj
/TT2 1 Tf
T*
(forName)Tj
/TT0 1 Tf
( que se utiliza para cargar e instanciar clases del classpath, pero a lo\ mejor no te has )Tj
T*
(parado a mirar otros m\351todos muy interesantes que tiene, como los sig\uientes. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 51.02507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 51.02507 Tm
(java.lang.Class forName\(String className\))Tj
/TT0 1 Tf
(: Carga una clase )Tj
/TT1 1 Tf
(del classpath)Tj
/TT0 1 Tf
( a partir de su )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_2 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(1 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj106 0 obj 4191endobj107 0 obj<</Length 106 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [12 557.17529 600 606.37531 ]>>BDC 
Q
0 0 0 rg
0 i 
12 557.17529 588 49.2 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [13 558.17529 599 605.37531 ]>>BDC 
Q
1 1 1 rg
13 558.17529 586 47.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 20 0 0 20 10 729.47565 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 692.85803 Tm
(Fecha de creaci\363n: )Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(Revisi\363n )Tj
/TT1 1 Tf
(1.0)Tj
/TT0 1 Tf
( \()Tj
/TT1 1 Tf
(27.07.2004)Tj
/TT0 1 Tf
(\) )Tj
/TT1 1 Tf
0 -2.78403 TD
(Eneko Gonz\341lez Benito \(Keko\))Tj
/TT0 1 Tf
( )Tj
0 -1.20068 TD
(enekog AT euskalnet DOT net)Tj
/TT2 1 Tf
0.41667 -3.2 Td
(Copyright \(c\) 2004, Eneko Gonz\341lez Benito. Este documento puede ser\ distribuido solo bajo los )Tj
0 -1.2 TD
(t\351rminos y condiciones de la licencia de Documentaci\363n de javaHisp\ano v1.0 o posterior \(la )Tj
T*
(\372ltima versi\363n se encuentra en http://www.javahispano.org/licencia\s/\).)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 520.40338 Tm
(Introducci\363n )Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 50 484.43329 Tm
([1] El API Reflection es una herramienta muy poderosa que nos permite re\alizar en )Tj
T*
(Java cosas que en otros lenguajes es imposible. Sin embargo, y a pesar d\e su )Tj
T*
(potencial, es un API bastante desconocido, sobre todo para los principia\ntes en el )Tj
T*
(mundo Java. A lo largo de este \341rticulo, vamos a intentar comprender \las )Tj
T*
(posibilidades que nos ofrece este API, introduci\351ndonos poco a poco e\n su uso.)Tj
0 -2.78333 TD
([2] Todos sabemos que un buen dise\361o es )Tj
/TT1 1 Tf
(muy importante)Tj
/TT0 1 Tf
( \(si no imprescindible\) )Tj
0 -1.20068 TD
(en cualquier programa. Para ello, estamos acostumbrados a utilizar heren\cia, )Tj
0 -1.2 TD
(interfaces, etc. en nuestros programas. Sin embargo, la infinita varieda\d de )Tj
T*
(problemas a los que no podemos tener que enfrentar, hace que estas t\351\cnicas no )Tj
T*
(siempre sean suficientes para nuestros prop\363sitos.)Tj
0 -2.78333 TD
([3] Pongamos, por ejemplo, que estamos trabajando en un programa que nos\ )Tj
0 -1.2 TD
(ayude a )Tj
/TT2 1 Tf
(debuggear)Tj
/TT0 1 Tf
( otros programas, describiendo el contenido de cualquier objeto )Tj
T*
(que queramos. \277Como hacemos que nuestro programa trabaje con el conte\nido de )Tj
T*
(dichos objetos? Lo primero que se nos puede ocurrir es crear un interfaz\ que deben )Tj
T*
(cumplir los objetos )Tj
/TT2 1 Tf
(describibles)Tj
/TT0 1 Tf
(, pero ... \277que ocurre cuando esos objetos no han )Tj
T*
(sido creados por nosotros? Aqui es donde entra en juego el API Reflectio\n. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 192.39519 Tm
(Trabajando con clases.)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 156.42508 Tm
([1] Todos los objetos en java heredan de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT0 1 Tf
( y por ello estan dotados de )Tj
T*
(un m\351todo )Tj
/TT2 1 Tf
(getClass)Tj
/TT0 1 Tf
(, cuya firma es )Tj
/TT2 1 Tf
(public final Class getClass\(\))Tj
/TT0 1 Tf
(. Este m\351todo nos devuelve un )Tj
T*
(objeto )Tj
/TT2 1 Tf
(java.lang.Class)Tj
/TT0 1 Tf
(, que va a ser nuestro punto de entrada al API Reflection. Si alguna vez\ )Tj
T*
(has cargado clases dinamicante en Java, es posible que conozcas esta cla\se por su m\351todo )Tj
/TT2 1 Tf
T*
(forName)Tj
/TT0 1 Tf
( que se utiliza para cargar e instanciar clases del classpath, pero a lo\ mejor no te has )Tj
T*
(parado a mirar otros m\351todos muy interesantes que tiene, como los sig\uientes. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 51.02507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 51.02507 Tm
(java.lang.Class forName\(String className\))Tj
/TT0 1 Tf
(: Carga una clase )Tj
/TT1 1 Tf
(del classpath)Tj
/TT0 1 Tf
( a partir de su )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj108 0 obj 4051endobj109 0 obj<</Length 108 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 151.96709 602 454.36707 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 151.96709 592 302.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 85.16708 ]>>BDC 
Q
10 36 592 49.16708 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 50 754.85803 Tm
(nombre \(nombre completo, con todos los paquetes. Si la clase no se pued\e cargar, )Tj
0 -1.2 TD
(porque no se encuentra en el classpath, se lanzar\341 una )Tj
/TT1 1 Tf
(java.lang.)Tj
T*
(ClassNotFoundException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 711.65796 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 711.65796 Tm
(java.lang.reflect.Field getField\(String name\))Tj
/TT0 1 Tf
(: Devuelve un campo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a )Tj
0 -1.20068 TD
(partir de su nombre. Si la clase no contiene ning\372n campo con ese nom\bre, se )Tj
0 -1.20001 TD
(comprueban sus superclases recursivamente, y en caso de no encontrar fin\almente el )Tj
0 -1.2 TD
(campo, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchFieldException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 654.04974 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 654.04974 Tm
(java.lang.reflect.Field[] getFields\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los campos )Tj
/TT2 1 Tf
(p\372blicos)Tj
/TT0 1 Tf
( de )Tj
0 -1.20068 TD
(la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 625.24152 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 625.24152 Tm
(java.lang.reflect.Method getMethod\(String name, Class[] parameterTypes\)\)Tj
/TT0 1 Tf
(: Devuelve un )Tj
0 -1.2 TD
(m\351todo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a partir de su nombre, y de un array con las clases de los\ )Tj
0 -1.20068 TD
(par\341metros del m\351todo. Si la clase no contiene ning\372n m\351todo\ con ese nombre y esos )Tj
0 -1.2 TD
(par\341mtetros, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchMethodException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 567.6333 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 567.6333 Tm
(java.lang.reflect.Method[] getMethods\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los m\351todos )Tj
/TT2 1 Tf
T*
(p\372blicos)Tj
/TT0 1 Tf
( de la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 538.82507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 538.82507 Tm
(java.lang.Class[] getInterfaces\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los interfaces que )Tj
T*
(implementa la clase. )Tj
-3.33333 -2.78333 Td
([2] Vamos a ver un ejemplo muy sencillo de como utilizar de algunos de e\sos m\351todos. Primero, )Tj
T*
(necesitamos una clase sobre la que vamos a trabajar, como puede ser la s\iguiente. )Tj
/TT3 1 Tf
0 -2.55507 TD
(public class EjemploBean {)Tj
0 -1.2 TD
( )Tj
T*
(  public String nombre = "Keko";)Tj
T*
(  private String email = "keko@miservidor.es";)Tj
0 -2.39999 TD
(  private void setNombre\(String s\) {)Tj
0 -1.2 TD
(    nombre = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  protected String getNombre\(\) {)Tj
0 -1.2 TD
(    return nombre;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public void setEmail\(String s\) {)Tj
0 -1.2 TD
(    email = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public String getEmail\(\) {)Tj
0 -1.2 TD
(    return email;)Tj
T*
(  })Tj
T*
(})Tj
/TT0 1 Tf
0 -3.0116 TD
(Tambi\351n necesitamos la clase que va a realizar el trabajo, cuyo c\363\digo podemos ver a )Tj
0 -1.2 TD
(continuaci\363n. )Tj
/TT3 1 Tf
0 -2.55507 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_1 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(2 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj110 0 obj 3857endobj111 0 obj<</Length 110 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 151.96709 602 454.36707 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 151.96709 592 302.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 85.16708 ]>>BDC 
Q
10 36 592 49.16708 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 50 754.85803 Tm
(nombre \(nombre completo, con todos los paquetes. Si la clase no se pued\e cargar, )Tj
0 -1.2 TD
(porque no se encuentra en el classpath, se lanzar\341 una )Tj
/TT1 1 Tf
(java.lang.)Tj
T*
(ClassNotFoundException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 711.65796 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 711.65796 Tm
(java.lang.reflect.Field getField\(String name\))Tj
/TT0 1 Tf
(: Devuelve un campo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a )Tj
0 -1.20068 TD
(partir de su nombre. Si la clase no contiene ning\372n campo con ese nom\bre, se )Tj
0 -1.20001 TD
(comprueban sus superclases recursivamente, y en caso de no encontrar fin\almente el )Tj
0 -1.2 TD
(campo, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchFieldException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 654.04974 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 654.04974 Tm
(java.lang.reflect.Field[] getFields\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los campos )Tj
/TT2 1 Tf
(p\372blicos)Tj
/TT0 1 Tf
( de )Tj
0 -1.20068 TD
(la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 625.24152 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 625.24152 Tm
(java.lang.reflect.Method getMethod\(String name, Class[] parameterTypes\)\)Tj
/TT0 1 Tf
(: Devuelve un )Tj
0 -1.2 TD
(m\351todo )Tj
/TT2 1 Tf
(p\372blico)Tj
/TT0 1 Tf
( de la clase, a partir de su nombre, y de un array con las clases de los\ )Tj
0 -1.20068 TD
(par\341metros del m\351todo. Si la clase no contiene ning\372n m\351todo\ con ese nombre y esos )Tj
0 -1.2 TD
(par\341mtetros, se lanzar\341 la excepcion )Tj
/TT1 1 Tf
(java.lang.NoSuchMethodException)Tj
/TT0 1 Tf
(. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 567.6333 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 567.6333 Tm
(java.lang.reflect.Method[] getMethods\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los m\351todos )Tj
/TT2 1 Tf
T*
(p\372blicos)Tj
/TT0 1 Tf
( de la clase, y de sus superclases. )Tj
/T1_0 1 Tf
6 0 0 6 34.694 538.82507 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12 0 0 12 50 538.82507 Tm
(java.lang.Class[] getInterfaces\(\))Tj
/TT0 1 Tf
(: Devuelve un array con todos los interfaces que )Tj
T*
(implementa la clase. )Tj
-3.33333 -2.78333 Td
([2] Vamos a ver un ejemplo muy sencillo de como utilizar de algunos de e\sos m\351todos. Primero, )Tj
T*
(necesitamos una clase sobre la que vamos a trabajar, como puede ser la s\iguiente. )Tj
/TT3 1 Tf
0 -2.55507 TD
(public class EjemploBean {)Tj
0 -1.2 TD
( )Tj
T*
(  public String nombre = "Keko";)Tj
T*
(  private String email = "keko@miservidor.es";)Tj
0 -2.39999 TD
(  private void setNombre\(String s\) {)Tj
0 -1.2 TD
(    nombre = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  protected String getNombre\(\) {)Tj
0 -1.2 TD
(    return nombre;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public void setEmail\(String s\) {)Tj
0 -1.2 TD
(    email = s;)Tj
T*
(  })Tj
0 -2.39999 TD
(  public String getEmail\(\) {)Tj
0 -1.2 TD
(    return email;)Tj
T*
(  })Tj
T*
(})Tj
/TT0 1 Tf
0 -3.0116 TD
(Tambi\351n necesitamos la clase que va a realizar el trabajo, cuyo c\363\digo podemos ver a )Tj
0 -1.2 TD
(continuaci\363n. )Tj
/TT3 1 Tf
0 -2.55507 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj112 0 obj 2403endobj113 0 obj<</Length 112 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 319.60001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 319.60001 592 446.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 252.8 ]>>BDC 
Q
10 36 592 216.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(  public static void main\(String arg[]\) {)Tj
0 -2.39999 TD
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\)\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.println\("\\t" + metodo.getName\(\)\);)Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(    System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
([3] A continuaci\363n, si ejecutamos la clase )Tj
/TT2 1 Tf
(EjemploReflection)Tj
/TT1 1 Tf
(, el resultado que vamos a obtener )Tj
0 -1.2 TD
(es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos)Tj
0 -2.39999 TD
(        nombre)Tj
T*
(Lista de metodos)Tj
T*
(        setEmail)Tj
0 -1.2 TD
(        getEmail)Tj
T*
(        hashCode)Tj
T*
(        getClass)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        equals)Tj
T*
(        notify)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(3 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj114 0 obj 2209endobj115 0 obj<</Length 114 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 319.60001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 319.60001 592 446.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 252.8 ]>>BDC 
Q
10 36 592 216.8 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(  public static void main\(String arg[]\) {)Tj
0 -2.39999 TD
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\)\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.println\("\\t" + metodo.getName\(\)\);)Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(    System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
([3] A continuaci\363n, si ejecutamos la clase )Tj
/TT2 1 Tf
(EjemploReflection)Tj
/TT1 1 Tf
(, el resultado que vamos a obtener )Tj
0 -1.2 TD
(es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos)Tj
0 -2.39999 TD
(        nombre)Tj
T*
(Lista de metodos)Tj
T*
(        setEmail)Tj
0 -1.2 TD
(        getEmail)Tj
T*
(        hashCode)Tj
T*
(        getClass)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        wait)Tj
T*
(        equals)Tj
T*
(        notify)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj116 0 obj 5401endobj117 0 obj<</Length 116 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 737.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 737.20001 592 28.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 52.99178 ]>>BDC 
Q
10 36 592 16.99178 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        notifyAll)Tj
0 -1.2 TD
(        toString)Tj
/TT1 1 Tf
0 -3.0116 TD
(\277Qu\351 ha ocurrido? \277D\363nde est\341 el campo )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(? \277Y los m\351todos )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(? \277De )Tj
0 -1.2 TD
(d\363nde han salido esos otros m\351todos \()Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc.\)? Como ya hemos dicho antes, )Tj
T*
(los m\351todos de la API Reflection nos permiten acceder a los campos y \m\351todos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
( \(por )Tj
0 -1.20068 TD
(eso no aparecen )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(\) y los m\351todos )Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc. son )Tj
0 -1.2 TD
(m\351todos de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT1 1 Tf
(, de la que hereda nuestra clase. Sencillo, \277o no? Pues )Tj
0 -1.20001 TD
(vamos a intentar complicarlo un poco m\341s, obteniendo m\341s informaci\\363n de los campos y los )Tj
0 -1.2 TD
(m\351todos. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 582.61987 Tm
(Trabajando con clases. Campos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 546.64978 Tm
([1] Si miramos en la API de Reflection, la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Field)Tj
/TT1 1 Tf
( podemos ver muchos )Tj
T*
(m\351todos que nos van a permitir acceder a los campos de una clase, acc\eder a su valor en un )Tj
T*
(objeto determinado, e incluso modificar su valor. Vamos a ver algunos de\ ellos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 484.44977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 484.44977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 470.04974 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 470.04974 Tm
(public Class getType\(\))Tj
/TT1 1 Tf
(: Devuelve la clase del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 455.64975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 455.64975 Tm
(public Object get\(Object obj\))Tj
/TT1 1 Tf
(: Devuelve el valor del campo en un objeto. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 441.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 441.24976 Tm
(public void set\(Object obj, Object value\))Tj
/TT1 1 Tf
(: Asigna un valor al campo en un objeto. )Tj
-3.33333 -2.78333 Td
(Como podemos ver, los m\351todos )Tj
/TT2 1 Tf
(getName)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(getType)Tj
/TT1 1 Tf
( se aplican sobre la clase, pero los m\351todos )Tj
/TT2 1 Tf
T*
(get)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(set)Tj
/TT1 1 Tf
( se aplican sobre un determinado objeto. Estos m\351todos los veremos en\ el \372ltimo )Tj
T*
(apartado. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 341.01987 Tm
(Trabajando con clases. M\351todos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 305.04974 Tm
([1] Vamos a fijarnos ahora en la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Method)Tj
/TT1 1 Tf
(, en la que podemos encontrar, )Tj
T*
(entre otros, los siguientes m\351todos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 257.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 257.24976 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 242.84975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 242.84975 Tm
(public Class[] getParameterTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de los par\341metros )Tj
T*
(del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 214.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 214.04976 Tm
(public Class[] getExceptionTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de las excepciones )Tj
T*
(que puede lanzar el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 185.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 185.24977 Tm
(public Class getReturnType\(\)\))Tj
/TT1 1 Tf
(: Devuelve la clase del valor que devuelve el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 170.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 170.84976 Tm
(public Object invoke\(Object obj, Object[] args\))Tj
/TT1 1 Tf
(: Ejecuta el m\351todo sobre un objeto, )Tj
T*
(pas\341ndole los par\341metros necesarios, y devuelve su resultado. )Tj
-3.33333 -2.78333 Td
(Como en el caso anterior, ciertos m\351todos son aplicables directamente\ sobre la clase, mientras )Tj
T*
(que otros \(el m\351todo )Tj
/TT2 1 Tf
(invoke)Tj
/TT1 1 Tf
(\) se aplica sobre un objeto concreto. )Tj
0 -2.78334 TD
([2] Vamos a ver con un ejemplo como utilizar dichos m\351todos. )Tj
/TT0 1 Tf
0 -2.55505 TD
(import java.lang.reflect.*;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_2 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(4 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj118 0 obj 5207endobj119 0 obj<</Length 118 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 737.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 737.20001 592 28.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 52.99178 ]>>BDC 
Q
10 36 592 16.99178 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        notifyAll)Tj
0 -1.2 TD
(        toString)Tj
/TT1 1 Tf
0 -3.0116 TD
(\277Qu\351 ha ocurrido? \277D\363nde est\341 el campo )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(? \277Y los m\351todos )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(? \277De )Tj
0 -1.2 TD
(d\363nde han salido esos otros m\351todos \()Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc.\)? Como ya hemos dicho antes, )Tj
T*
(los m\351todos de la API Reflection nos permiten acceder a los campos y \m\351todos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
( \(por )Tj
0 -1.20068 TD
(eso no aparecen )Tj
/TT2 1 Tf
(email)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getNombre)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(setNombre)Tj
/TT1 1 Tf
(\) y los m\351todos )Tj
/TT2 1 Tf
(hashCode)Tj
/TT1 1 Tf
(, )Tj
/TT2 1 Tf
(getClass)Tj
/TT1 1 Tf
(, etc. son )Tj
0 -1.2 TD
(m\351todos de la clase )Tj
/TT2 1 Tf
(java.lang.Object)Tj
/TT1 1 Tf
(, de la que hereda nuestra clase. Sencillo, \277o no? Pues )Tj
0 -1.20001 TD
(vamos a intentar complicarlo un poco m\341s, obteniendo m\341s informaci\\363n de los campos y los )Tj
0 -1.2 TD
(m\351todos. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 582.61987 Tm
(Trabajando con clases. Campos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 546.64978 Tm
([1] Si miramos en la API de Reflection, la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Field)Tj
/TT1 1 Tf
( podemos ver muchos )Tj
T*
(m\351todos que nos van a permitir acceder a los campos de una clase, acc\eder a su valor en un )Tj
T*
(objeto determinado, e incluso modificar su valor. Vamos a ver algunos de\ ellos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 484.44977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 484.44977 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 470.04974 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 470.04974 Tm
(public Class getType\(\))Tj
/TT1 1 Tf
(: Devuelve la clase del campo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 455.64975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 455.64975 Tm
(public Object get\(Object obj\))Tj
/TT1 1 Tf
(: Devuelve el valor del campo en un objeto. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 441.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 441.24976 Tm
(public void set\(Object obj, Object value\))Tj
/TT1 1 Tf
(: Asigna un valor al campo en un objeto. )Tj
-3.33333 -2.78333 Td
(Como podemos ver, los m\351todos )Tj
/TT2 1 Tf
(getName)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(getType)Tj
/TT1 1 Tf
( se aplican sobre la clase, pero los m\351todos )Tj
/TT2 1 Tf
T*
(get)Tj
/TT1 1 Tf
( y )Tj
/TT2 1 Tf
(set)Tj
/TT1 1 Tf
( se aplican sobre un determinado objeto. Estos m\351todos los veremos en\ el \372ltimo )Tj
T*
(apartado. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 341.01987 Tm
(Trabajando con clases. M\351todos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 305.04974 Tm
([1] Vamos a fijarnos ahora en la clase )Tj
/TT2 1 Tf
(java.lang.reflect.Method)Tj
/TT1 1 Tf
(, en la que podemos encontrar, )Tj
T*
(entre otros, los siguientes m\351todos. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 257.24976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 257.24976 Tm
(public String getName\(\))Tj
/TT1 1 Tf
(: Devuelve el nombre del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 242.84975 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 242.84975 Tm
(public Class[] getParameterTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de los par\341metros )Tj
T*
(del m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 214.04976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 214.04976 Tm
(public Class[] getExceptionTypes\(\))Tj
/TT1 1 Tf
(: Devuelve un array con las clases de las excepciones )Tj
T*
(que puede lanzar el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 185.24977 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 185.24977 Tm
(public Class getReturnType\(\)\))Tj
/TT1 1 Tf
(: Devuelve la clase del valor que devuelve el m\351todo. )Tj
/T1_1 1 Tf
6 0 0 6 34.694 170.84976 Tm
(l)Tj
/TT1 1 Tf
(     )Tj
/TT2 1 Tf
12 0 0 12 50 170.84976 Tm
(public Object invoke\(Object obj, Object[] args\))Tj
/TT1 1 Tf
(: Ejecuta el m\351todo sobre un objeto, )Tj
T*
(pas\341ndole los par\341metros necesarios, y devuelve su resultado. )Tj
-3.33333 -2.78333 Td
(Como en el caso anterior, ciertos m\351todos son aplicables directamente\ sobre la clase, mientras )Tj
T*
(que otros \(el m\351todo )Tj
/TT2 1 Tf
(invoke)Tj
/TT1 1 Tf
(\) se aplica sobre un objeto concreto. )Tj
0 -2.78334 TD
([2] Vamos a ver con un ejemplo como utilizar dichos m\351todos. )Tj
/TT0 1 Tf
0 -2.55505 TD
(import java.lang.reflect.*;)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj120 0 obj 2737endobj121 0 obj<</Length 120 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 36 592 730 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(public class EjemploReflection2 {)Tj
0 -2.39999 TD
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
T*
(    try {)Tj
T*
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\) + " \(" + campo.ge\tType\(\).getName)Tj
T*
(\(\) + "\)"\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.print\("\\t" + metodo.getName\(\) + " \("\);)Tj
T*
( )Tj
T*
(        // Recorremos los parametros del metodo)Tj
T*
(        Class parametros[] = metodo.getParameterTypes\(\);)Tj
T*
(        for \(int j=0; j < parametros.length; j++\) {)Tj
T*
(          System.out.print\(parametros[j].getName\(\)\);)Tj
T*
(          if \(j < parametros.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
( )Tj
T*
(        System.out.print\("\) = " + metodo.getReturnType\(\).getName\(\)\\);)Tj
T*
(   )Tj
T*
(        // Recorremos las excepciones del metodo)Tj
T*
(        Class excepciones[] = metodo.getExceptionTypes\(\);)Tj
T*
(        System.out.print\(" ["\);)Tj
T*
(        for \(int j=0; j < excepciones.length; j++\) {)Tj
T*
(          System.out.print\(excepciones[j].getName\(\)\);)Tj
T*
(          if \(j < excepciones.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
(        System.out.println\("]"\);   )Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(5 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj122 0 obj 2543endobj123 0 obj<</Length 122 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 36 592 730 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 743.19714 Tm
(public class EjemploReflection2 {)Tj
0 -2.39999 TD
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Field campo, campos[];)Tj
T*
(    Method metodo, metodos[];)Tj
T*
(    try {)Tj
T*
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Recorremos los campos)Tj
0 -1.2 TD
(      System.out.println\("Lista de campos:\\n"\);)Tj
T*
(      campos = clase.getFields\(\);)Tj
T*
(      for \(int i=0; i < campos.length; i++\) {)Tj
T*
(        campo = campos[i];)Tj
T*
(        System.out.println\("\\t" + campo.getName\(\) + " \(" + campo.ge\tType\(\).getName)Tj
T*
(\(\) + "\)"\);)Tj
T*
(      })Tj
0 -2.39999 TD
(      // Recorremos los metodos)Tj
0 -1.2 TD
(      System.out.println\("\\nLista de metodos:\\n"\);)Tj
T*
(      metodos = clase.getMethods\(\);)Tj
T*
(      for \(int i=0; i < metodos.length; i++\) {)Tj
T*
(        metodo = metodos[i];)Tj
T*
(        System.out.print\("\\t" + metodo.getName\(\) + " \("\);)Tj
T*
( )Tj
T*
(        // Recorremos los parametros del metodo)Tj
T*
(        Class parametros[] = metodo.getParameterTypes\(\);)Tj
T*
(        for \(int j=0; j < parametros.length; j++\) {)Tj
T*
(          System.out.print\(parametros[j].getName\(\)\);)Tj
T*
(          if \(j < parametros.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
( )Tj
T*
(        System.out.print\("\) = " + metodo.getReturnType\(\).getName\(\)\\);)Tj
T*
(   )Tj
T*
(        // Recorremos las excepciones del metodo)Tj
T*
(        Class excepciones[] = metodo.getExceptionTypes\(\);)Tj
T*
(        System.out.print\(" ["\);)Tj
T*
(        for \(int j=0; j < excepciones.length; j++\) {)Tj
T*
(          System.out.print\(excepciones[j].getName\(\)\);)Tj
T*
(          if \(j < excepciones.length-1\) System.out.print\(", "\);)Tj
T*
(        })Tj
T*
(        System.out.println\("]"\);   )Tj
T*
(      })Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj124 0 obj 3022endobj125 0 obj<</Length 124 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 751.59998 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 751.59998 592 14.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 454.39996 602 699.20001 ]>>BDC 
Q
10 454.39996 592 244.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 222.59177 ]>>BDC 
Q
10 36 592 186.59177 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Ejecutamos esta clase, y el resultado es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre \(java.lang.String\))Tj
T*
(Lista de metodos:)Tj
T*
(        setEmail \(java.lang.String\) = void [])Tj
0 -1.2 TD
(        getEmail \(\) = java.lang.String [])Tj
T*
(        hashCode \(\) = int [])Tj
T*
(        getClass \(\) = java.lang.Class [])Tj
T*
(        wait \(\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long, int\) = void [java.lang.InterruptedException])Tj
T*
(        equals \(java.lang.Object\) = boolean [])Tj
T*
(        notify \(\) = void [])Tj
T*
(        notifyAll \(\) = void [])Tj
T*
(        toString \(\) = java.lang.String [])Tj
/TT1 1 Tf
0 -3.0116 TD
(Ya tenemos una descripci\363n detallada de nuestra clase )Tj
/TT2 1 Tf
(EjemploBean)Tj
/TT1 1 Tf
(. Sin embargo, lo habitual )Tj
0 -1.2 TD
(es que queramos trabajar con objetos, y no con sus clases, utilizando lo\s m\351todos que ya )Tj
T*
(hemos visto. Vamos con ello. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 357.4281 Tm
(Trabajando con objetos.)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 321.45798 Tm
([1] Ya hemos visto parte de los m\351todos del API Reflection, que nos p\ermitir\355an acceder a los )Tj
T*
(campos y m\351todos de una clase, y algunos que tambi\351n nos permiten \acceder a campos y )Tj
T*
(m\351todos de un objeto concreto. Vamos a verlo con varios ejemplos. )Tj
0 -2.78333 TD
([2] Para simplificarlo un poco, vamos a ir por partes. Primero, vamos a \acceder directamente a )Tj
0 -1.2 TD
(los campos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
(, en el siguiente ejemplo. )Tj
/TT0 1 Tf
0 -2.55576 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection3 {)Tj
T*
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Object objeto;)Tj
T*
(    Field campo, campos[];)Tj
T*
(    String valor;)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_1 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(6 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj126 0 obj 2828endobj127 0 obj<</Length 126 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 751.59998 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 751.59998 592 14.39999 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 454.39996 602 699.20001 ]>>BDC 
Q
10 454.39996 592 244.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 222.59177 ]>>BDC 
Q
10 36 592 186.59177 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Ejecutamos esta clase, y el resultado es el siguiente. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre \(java.lang.String\))Tj
T*
(Lista de metodos:)Tj
T*
(        setEmail \(java.lang.String\) = void [])Tj
0 -1.2 TD
(        getEmail \(\) = java.lang.String [])Tj
T*
(        hashCode \(\) = int [])Tj
T*
(        getClass \(\) = java.lang.Class [])Tj
T*
(        wait \(\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long\) = void [java.lang.InterruptedException])Tj
T*
(        wait \(long, int\) = void [java.lang.InterruptedException])Tj
T*
(        equals \(java.lang.Object\) = boolean [])Tj
T*
(        notify \(\) = void [])Tj
T*
(        notifyAll \(\) = void [])Tj
T*
(        toString \(\) = java.lang.String [])Tj
/TT1 1 Tf
0 -3.0116 TD
(Ya tenemos una descripci\363n detallada de nuestra clase )Tj
/TT2 1 Tf
(EjemploBean)Tj
/TT1 1 Tf
(. Sin embargo, lo habitual )Tj
0 -1.2 TD
(es que queramos trabajar con objetos, y no con sus clases, utilizando lo\s m\351todos que ya )Tj
T*
(hemos visto. Vamos con ello. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 357.4281 Tm
(Trabajando con objetos.)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 10 321.45798 Tm
([1] Ya hemos visto parte de los m\351todos del API Reflection, que nos p\ermitir\355an acceder a los )Tj
T*
(campos y m\351todos de una clase, y algunos que tambi\351n nos permiten \acceder a campos y )Tj
T*
(m\351todos de un objeto concreto. Vamos a verlo con varios ejemplos. )Tj
0 -2.78333 TD
([2] Para simplificarlo un poco, vamos a ir por partes. Primero, vamos a \acceder directamente a )Tj
0 -1.2 TD
(los campos )Tj
/TT3 1 Tf
(p\372blicos)Tj
/TT1 1 Tf
(, en el siguiente ejemplo. )Tj
/TT0 1 Tf
0 -2.55576 TD
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection3 {)Tj
T*
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Object objeto;)Tj
T*
(    Field campo, campos[];)Tj
T*
(    String valor;)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj128 0 obj 3296endobj129 0 obj<</Length 128 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 304.59177 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 304.59177 592 461.4082 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 194.59177 602 252.19176 ]>>BDC 
Q
10 194.59177 592 57.60001 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 36.79176 ]>>BDC 
Q
10 36 592 0.79176 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 756.98895 Tm
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Instanciamos un objeto de la clase)Tj
0 -1.2 TD
(      try {)Tj
T*
(        objeto = clase.newInstance\(\);)Tj
T*
(  )Tj
T*
(        // Recorremos los campos)Tj
T*
(        System.out.println\("Lista de campos:\\n"\);)Tj
T*
(        campos = clase.getFields\(\);)Tj
T*
(        for \(int i=0; i < campos.length; i++\) {)Tj
T*
(          campo = campos[i];)Tj
T*
(       )Tj
T*
(          // Leemos su valor)Tj
T*
(          valor = \(String\) campo.get\(objeto\);)Tj
T*
(          System.out.println\("\\t" + campo.getName\(\) + " = " + valor \+ " \(" + )Tj
T*
(campo.getType\(\).getName\(\)+ "\)"\);)Tj
0 -2.39999 TD
(          // Cambiamos su valor)Tj
0 -1.2 TD
(          valor += " nuevo";)Tj
T*
(          campo.set\(objeto, valor\);)Tj
T*
(          System.out.println\("\\tNuevo valor: " + campo.getName\(\) + "\ = " + valor\);)Tj
T*
(        })Tj
T*
(      } catch \(InstantiationException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      } catch \(IllegalAccessException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      }    )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Este es el resultado de ejecutar la clase anterior. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre = Keko \(java.lang.String\))Tj
0 -1.2 TD
(        Nuevo valor: nombre = Keko nuevo)Tj
/TT1 1 Tf
0 -3.0116 TD
(Como se puede ver, no solo hemos podido acceder a los campos de un objet\o, sino que hemos )Tj
0 -1.2 TD
(podido modificar su valor de una forma bastante sencilla. )Tj
0 -2.78333 TD
([3] Con lo visto hasta ahora podemos acceder al contenido de los campos \p\372blicos de un objeto. )Tj
0 -1.2 TD
(Sin embargo, todos sabemos que lo usual \(y recomendable\) es que los ca\mpos de un objeto \(de )Tj
T*
(su clase\) sean privados, y que tengamos disponibles unos m\351todos acc\esores \()Tj
/TT2 1 Tf
(getters)Tj
/TT1 1 Tf
(\) y )Tj
T*
(modificadores \()Tj
/TT2 1 Tf
(setters)Tj
/TT1 1 Tf
(\) que operan sobre esos campos. Vamos a ver con un ejemplo, como )Tj
T*
(tambi\351n podemos ejecutar dichos m\351todos. )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(7 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj130 0 obj 3102endobj131 0 obj<</Length 130 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 304.59177 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 304.59177 592 461.4082 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 194.59177 602 252.19176 ]>>BDC 
Q
10 194.59177 592 57.60001 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 36.79176 ]>>BDC 
Q
10 36 592 0.79176 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 756.98895 Tm
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Instanciamos un objeto de la clase)Tj
0 -1.2 TD
(      try {)Tj
T*
(        objeto = clase.newInstance\(\);)Tj
T*
(  )Tj
T*
(        // Recorremos los campos)Tj
T*
(        System.out.println\("Lista de campos:\\n"\);)Tj
T*
(        campos = clase.getFields\(\);)Tj
T*
(        for \(int i=0; i < campos.length; i++\) {)Tj
T*
(          campo = campos[i];)Tj
T*
(       )Tj
T*
(          // Leemos su valor)Tj
T*
(          valor = \(String\) campo.get\(objeto\);)Tj
T*
(          System.out.println\("\\t" + campo.getName\(\) + " = " + valor \+ " \(" + )Tj
T*
(campo.getType\(\).getName\(\)+ "\)"\);)Tj
0 -2.39999 TD
(          // Cambiamos su valor)Tj
0 -1.2 TD
(          valor += " nuevo";)Tj
T*
(          campo.set\(objeto, valor\);)Tj
T*
(          System.out.println\("\\tNuevo valor: " + campo.getName\(\) + "\ = " + valor\);)Tj
T*
(        })Tj
T*
(      } catch \(InstantiationException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      } catch \(IllegalAccessException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      }    )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Este es el resultado de ejecutar la clase anterior. )Tj
/TT0 1 Tf
0 -2.55507 TD
(Lista de campos:)Tj
0 -2.39999 TD
(        nombre = Keko \(java.lang.String\))Tj
0 -1.2 TD
(        Nuevo valor: nombre = Keko nuevo)Tj
/TT1 1 Tf
0 -3.0116 TD
(Como se puede ver, no solo hemos podido acceder a los campos de un objet\o, sino que hemos )Tj
0 -1.2 TD
(podido modificar su valor de una forma bastante sencilla. )Tj
0 -2.78333 TD
([3] Con lo visto hasta ahora podemos acceder al contenido de los campos \p\372blicos de un objeto. )Tj
0 -1.2 TD
(Sin embargo, todos sabemos que lo usual \(y recomendable\) es que los ca\mpos de un objeto \(de )Tj
T*
(su clase\) sean privados, y que tengamos disponibles unos m\351todos acc\esores \()Tj
/TT2 1 Tf
(getters)Tj
/TT1 1 Tf
(\) y )Tj
T*
(modificadores \()Tj
/TT2 1 Tf
(setters)Tj
/TT1 1 Tf
(\) que operan sobre esos campos. Vamos a ver con un ejemplo, como )Tj
T*
(tambi\351n podemos ejecutar dichos m\351todos. )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj132 0 obj 2899endobj133 0 obj<</Length 132 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.16998 Tm
(Introducci\363n al API Reflection \(Reflexi\363n\) de Java.)Tj
ET
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 36 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
10 36 592 730 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
12 0 0 12 10 757.59717 Tm
(import java.lang.reflect.*;)Tj
0 -2.39999 TD
(public class EjemploReflection4 {)Tj
T*
(  public static void main\(String arg[]\) {)Tj
T*
(    Class clase;)Tj
0 -1.2 TD
(    Object objeto;)Tj
T*
(    Method metGetEmail, metSetEmail;)Tj
T*
(    String resultado;)Tj
T*
(    Class[] clasesParamSetEmail;)Tj
T*
(    Object[] paramSetEmail;)Tj
0 -2.39999 TD
(    try {)Tj
0 -1.2 TD
(      // Cargamos la clase)Tj
T*
(      clase = Class.forName\("EjemploBean"\);)Tj
0 -2.39999 TD
(      // Instanciamos un objeto de la clase)Tj
0 -1.2 TD
(      try {)Tj
T*
(        objeto = clase.newInstance\(\);)Tj
0 -2.39999 TD
(        try {    )Tj
0 -1.2 TD
(          // Accedemos al metodo getEmail, sin parametros)Tj
T*
(          metGetEmail = clase.getMethod\("getEmail", null\);)Tj
T*
(          resultado = \(String\) metGetEmail.invoke\(objeto, null\);)Tj
T*
(          System.out.println\("getEmail\(\) = " + resultado\);)Tj
0 -2.39999 TD
(          // Accedemos al metodo setEmail, con un parametro \(String\))Tj
0 -1.2 TD
(          clasesParamSetEmail = new Class[1];)Tj
T*
(          clasesParamSetEmail[0] = Class.forName\("java.lang.String"\);)Tj
T*
(          metSetEmail = clase.getMethod\("setEmail", clasesParamSetEmail\\);)Tj
T*
(          paramSetEmail = new Object[1];)Tj
T*
(          paramSetEmail[0] = resultado + " nuevo";)Tj
T*
(          metSetEmail.invoke\(objeto, paramSetEmail\);)Tj
T*
(          System.out.println\("setEmail\(\)"\);)Tj
0 -2.39999 TD
(          // Volvemos a llamar al metodo getEmail, sin parametros)Tj
0 -1.2 TD
(          resultado = \(String\) metGetEmail.invoke\(objeto, null\);)Tj
T*
(          System.out.println\("getEmail\(\) = " + resultado\);)Tj
0 -2.39999 TD
(        } catch \(NoSuchMethodException e\) {)Tj
0 -1.2 TD
(          System.out.println\("Error al acceder al metodo. " + e\);)Tj
T*
(        } catch \(SecurityException e\) {)Tj
T*
(          System.out.println\("Error al acceder al metodo. " + e\);)Tj
T*
(        } catch \(InvocationTargetException e\) {)Tj
T*
(          System.out.println\("Error al ejecutar el metodo. " + e\);)Tj
T*
(        })Tj
T*
(      } catch \(InstantiationException e\) {)Tj
T*
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
T*
(      } catch \(IllegalAccessException e\) {)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj134 0 obj 3973endobj135 0 obj<</Length 134 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 665.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 665.20001 592 100.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 569.59998 602 612.79999 ]>>BDC 
Q
10 569.59998 592 43.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
0 -1.2 TD
(      } )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Y el resultado de ejecutarlo. )Tj
/TT0 1 Tf
0 -2.55507 TD
(getEmail\(\) = keko@miservidor.es)Tj
0 -1.2 TD
(setEmail\(\))Tj
T*
(getEmail\(\) = keko@miservidor.es nuevo)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 534.82813 Tm
(Conclusi\363n )Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 498.85803 Tm
([1] Hemos visto, con varios ejemplos, parte de las posibilidades del API\ Reflection )Tj
T*
(de Java. Este API es m\341s extenso de lo que aqu\355 hemos visto, pero \el objetivo de )Tj
T*
(este art\355culo es hacer un introducci\363n al API, para que cada uno i\nvestigue con )Tj
T*
(mayor profundidad cuando lo necesite. Como siempre, lo mejor para aprend\er es )Tj
T*
(leer toda la documentaci\363n[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(1)Tj
0 0 0 rg
/TT1 1 Tf
(] posible y hacer pruebas con nuestro propio c\363digo. )Tj
0 -1.36736 TD
(Espero que este art\355culo nos sirva para perder un poco el miedo a est\e potente API. )Tj
0 -2.78334 TD
([2] Me gustar\355a resaltar que los ejemplos aqui expuestos estan basado\s en un )Tj
0 -1.2 TD
(proyecto real, en el que trabaj\351 para poder facilitar los logs de obj\etos cuyo )Tj
T*
(m\351todo )Tj
/TT3 1 Tf
(toString)Tj
/TT1 1 Tf
( no daban demasiada informaci\363n. Sin embargo, por si alguno )Tj
T*
(quiere utilizarlo con el mismo fin, le recomiendo que no trate de reinve\ntar la )Tj
T*
(rueda, y que utilice la clase BeanUtils[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(2)Tj
0 0 0 rg
/TT1 1 Tf
(] de Apache Commons, cuyo m\351todo )Tj
/TT3 1 Tf
0 -1.36736 TD
(describe)Tj
/TT1 1 Tf
( hace este trabajo de una manera excelente, am\351n de muchas m\341s cos\as. )Tj
0 -2.78333 TD
([3] Por \372ltimo, no quiero finalizar este art\355culo sin hacer una \372\ltima observaci\363n. )Tj
0 -1.2 TD
(Hace poco le\355 un dicho en un libro, que dec\355a as\355: )Tj
/TT2 1 Tf
(Para un hombre con un )Tj
0 -1.20068 TD
(martillo, todo lo que ve, son clavos)Tj
/TT1 1 Tf
(. Con esto quiero decir que, si bien este API )Tj
T*
(es muy potente, no es la soluci\363n a todos los problemas, y que utiliz\arlo puede )Tj
0 -1.2 TD
(convertirse en )Tj
/TT2 1 Tf
(matar moscas a ca\361onazos)Tj
/TT1 1 Tf
(. El c\363digo creado con este API tiende )Tj
0 -1.20068 TD
(a ser bastante mas complejo que su equivalente )Tj
/TT3 1 Tf
(tradicional)Tj
/TT1 1 Tf
(, adem\341s de que su )Tj
0 -1.2 TD
(rendimiento es peor. Antes de utilizarlo, aseg\372rate de que es la mejo\r soluci\363n de )Tj
T*
(la que dispones. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 145.18695 Tm
(Recursos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 109.21684 Tm
([1] Tutorial \(en ingl\351s, pero muy completo\) de Sun sobre el API Ref\lection, )Tj
0 0 0.60001 rg
(http://)Tj
0 -1.36667 TD
(java.sun.com/docs/books/tutorial/reflect/)Tj
0 0 0 rg
( )Tj
0 -2.95 TD
([2] Apache Commons BeanUtils, )Tj
0 0 0.60001 rg
(http://jakarta.apache.org/commons/beanutils/)Tj
0 0 0 rg
( )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
BT
/T1_1 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(9 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj136 0 obj 3779endobj137 0 obj<</Length 136 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/WebCaptureBG BMC 
/WebCaptureFN <</L 0 >>BDC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 665.20001 602 766 ]>>BDC 
Q
0.90196 0.94902 1 rg
0 i 
10 665.20001 592 100.8 re
f
EMC 
q
0 18 612 756 re
W* n
/Artifact <</Type /Layout /BBox [10 569.59998 602 612.79999 ]>>BDC 
Q
10 569.59998 592 43.2 re
f
EMC 
EMC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0 0 0 rg
BT
/TT0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 12 0 0 12 10 757.59717 Tm
(        System.out.println\("Error al instanciar el objeto. " + e\);    \)Tj
0 -1.2 TD
(      } )Tj
T*
(    } catch \(ClassNotFoundException e\) {)Tj
T*
(      System.out.println\("No se ha encontrado la clase. " + e\);)Tj
T*
(    })Tj
T*
(  })Tj
T*
(})Tj
/TT1 1 Tf
0 -3.0116 TD
(Y el resultado de ejecutarlo. )Tj
/TT0 1 Tf
0 -2.55507 TD
(getEmail\(\) = keko@miservidor.es)Tj
0 -1.2 TD
(setEmail\(\))Tj
T*
(getEmail\(\) = keko@miservidor.es nuevo)Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 534.82813 Tm
(Conclusi\363n )Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 498.85803 Tm
([1] Hemos visto, con varios ejemplos, parte de las posibilidades del API\ Reflection )Tj
T*
(de Java. Este API es m\341s extenso de lo que aqu\355 hemos visto, pero \el objetivo de )Tj
T*
(este art\355culo es hacer un introducci\363n al API, para que cada uno i\nvestigue con )Tj
T*
(mayor profundidad cuando lo necesite. Como siempre, lo mejor para aprend\er es )Tj
T*
(leer toda la documentaci\363n[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(1)Tj
0 0 0 rg
/TT1 1 Tf
(] posible y hacer pruebas con nuestro propio c\363digo. )Tj
0 -1.36736 TD
(Espero que este art\355culo nos sirva para perder un poco el miedo a est\e potente API. )Tj
0 -2.78334 TD
([2] Me gustar\355a resaltar que los ejemplos aqui expuestos estan basado\s en un )Tj
0 -1.2 TD
(proyecto real, en el que trabaj\351 para poder facilitar los logs de obj\etos cuyo )Tj
T*
(m\351todo )Tj
/TT3 1 Tf
(toString)Tj
/TT1 1 Tf
( no daban demasiada informaci\363n. Sin embargo, por si alguno )Tj
T*
(quiere utilizarlo con el mismo fin, le recomiendo que no trate de reinve\ntar la )Tj
T*
(rueda, y que utilice la clase BeanUtils[)Tj
0 0 0.60001 rg
/TT2 1 Tf
(2)Tj
0 0 0 rg
/TT1 1 Tf
(] de Apache Commons, cuyo m\351todo )Tj
/TT3 1 Tf
0 -1.36736 TD
(describe)Tj
/TT1 1 Tf
( hace este trabajo de una manera excelente, am\351n de muchas m\341s cos\as. )Tj
0 -2.78333 TD
([3] Por \372ltimo, no quiero finalizar este art\355culo sin hacer una \372\ltima observaci\363n. )Tj
0 -1.2 TD
(Hace poco le\355 un dicho en un libro, que dec\355a as\355: )Tj
/TT2 1 Tf
(Para un hombre con un )Tj
0 -1.20068 TD
(martillo, todo lo que ve, son clavos)Tj
/TT1 1 Tf
(. Con esto quiero decir que, si bien este API )Tj
T*
(es muy potente, no es la soluci\363n a todos los problemas, y que utiliz\arlo puede )Tj
0 -1.2 TD
(convertirse en )Tj
/TT2 1 Tf
(matar moscas a ca\361onazos)Tj
/TT1 1 Tf
(. El c\363digo creado con este API tiende )Tj
0 -1.20068 TD
(a ser bastante mas complejo que su equivalente )Tj
/TT3 1 Tf
(tradicional)Tj
/TT1 1 Tf
(, adem\341s de que su )Tj
0 -1.2 TD
(rendimiento es peor. Antes de utilizarlo, aseg\372rate de que es la mejo\r soluci\363n de )Tj
T*
(la que dispones. )Tj
0.64314 0.69804 0.77255 rg
/T1_0 1 Tf
18 0 0 18 10 145.18695 Tm
(Recursos)Tj
0 0 0 rg
/TT1 1 Tf
12 0 0 12 50 109.21684 Tm
([1] Tutorial \(en ingl\351s, pero muy completo\) de Sun sobre el API Ref\lection, )Tj
0 0 0.60001 rg
(http://)Tj
0 -1.36667 TD
(java.sun.com/docs/books/tutorial/reflect/)Tj
0 0 0 rg
( )Tj
0 -2.95 TD
([2] Apache Commons BeanUtils, )Tj
0 0 0.60001 rg
(http://jakarta.apache.org/commons/beanutils/)Tj
0 0 0 rg
( )Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
EMC 
Q

endstreamendobj138 0 obj 939endobj139 0 obj<</Length 138 0 R>>stream
/Artifact <</Type /Pagination /BBox [18 778 582 787 ]/Attached [/Top ]>>BDC 
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.64314 0.69804 0.77255 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 18 0 0 18 10 747.38696 Tm
(Acerca del autor)Tj
0 0 0 rg
/TT0 1 Tf
12 0 0 12 10 711.41681 Tm
(Eneko Gonz\341lez Benito \(Keko\))Tj
0 -1.2 TD
(Eneko lleva varios a\361os programando en Java, y actualmente trabaja co\n Java en una )Tj
T*
(consultor\355a en Bilbao. El poco tiempo libre que le deja el trabajo, s\e dedica a practicar deportes )Tj
T*
(\(senderismo, futbol, frontenis entre otros\) y a leer todo lo que pasa \por sus manos.)Tj
ET
EMC 
/Artifact <</Type /Pagination /BBox [18 5 582 14 ]/Attached [/Bottom ]>>BDC 
Q
0 0 0 rg
0 i 
BT
/T1_1 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 7.17 Tm
(file:///C|/javaHispano/tutoriales/Eneko%20Gonzalez%20-%20Reflection/refl\ection.html \(10 of 10\)12/08/2004 9:01:49)Tj
ET
EMC 

endstreamendobj140 0 obj<</Length 3275/Type/Metadata/Subtype/XML>>stream
<?xpacket begin='Ôªø' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:622ac52e-3f20-4b5f-a4a3-d170f87c9754' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Web Capture 6.0'></rdf:Description>
<rdf:Description rdf:about='uuid:622ac52e-3f20-4b5f-a4a3-d170f87c9754' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2004-08-12T08:04:05+02:00' xap:CreateDate='2004-08-12T08:01:46Z' xap:MetadataDate='2004-08-12T08:04:05+02:00'></rdf:Description>
<rdf:Description rdf:about='uuid:622ac52e-3f20-4b5f-a4a3-d170f87c9754' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:bdd38f88-7e9e-42d3-9442-d89e1dc561d5'/>
<rdf:Description rdf:about='uuid:622ac52e-3f20-4b5f-a4a3-d170f87c9754' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>Introducci√≥n al API Reflection (Reflexi√≥n) de Java.</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end='w'?>
endstreamendobjxref
1 1
0000051727 00000 n
3 1
0000051855 00000 n
10 1
0000052034 00000 n
13 1
0000052249 00000 n
15 1
0000052463 00000 n
17 1
0000052654 00000 n
19 1
0000052880 00000 n
21 1
0000053049 00000 n
23 1
0000053263 00000 n
25 1
0000053454 00000 n
27 1
0000053635 00000 n
39 1
0000053863 00000 n
88 53
0000054056 00000 n
0000054077 00000 n
0000058516 00000 n
0000058537 00000 n
0000062782 00000 n
0000062803 00000 n
0000066908 00000 n
0000066929 00000 n
0000070840 00000 n
0000070861 00000 n
0000073318 00000 n
0000073339 00000 n
0000075602 00000 n
0000075624 00000 n
0000081081 00000 n
0000081103 00000 n
0000086366 00000 n
0000086388 00000 n
0000090829 00000 n
0000090851 00000 n
0000095098 00000 n
0000095120 00000 n
0000099227 00000 n
0000099249 00000 n
0000103162 00000 n
0000103184 00000 n
0000105643 00000 n
0000105665 00000 n
0000107930 00000 n
0000107952 00000 n
0000113409 00000 n
0000113431 00000 n
0000118694 00000 n
0000118716 00000 n
0000121509 00000 n
0000121531 00000 n
0000124130 00000 n
0000124152 00000 n
0000127230 00000 n
0000127252 00000 n
0000130136 00000 n
0000130158 00000 n
0000133510 00000 n
0000133532 00000 n
0000136690 00000 n
0000136712 00000 n
0000139667 00000 n
0000139689 00000 n
0000143718 00000 n
0000143740 00000 n
0000147575 00000 n
0000147596 00000 n
0000148591 00000 n
trailer
<</Size 141/Root 1 0 R/Info 3 0 R/ID[<f492475962ac6b4f9d02abe507e12cfd><0620e2ddab9ba244b080be69e49231e6>]/Prev 49812 >>
startxref
151945
%%EOF
