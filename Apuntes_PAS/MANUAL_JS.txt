JAVASCRIPT - MANUAL
===================
<OBJETOS>************************************************************************************************************************************************
------
TEORÍA
------
Cuando se crea un objeto predefinido:
	function Factura(idFactura, idCliente)
	{
		this.idFactura = idFactura;	//Propiedad atributo.
		this.idCliente = idCliente;	//Propiedad atributo.
		
		//Se crea una propiedad que es un método:
	 (1)this.muestraCliente = function() {
			alert(this.idCliente);
		}
	 }
	 
Para cada new que se realiza para construir un objeto se crea una propiedad muestraCliente que es un método.
Para evitar sobrecargar la memoria, lo más normal es meter estos métodos en prototype, debido a que va a ser común a todos los objetos de la clase y
por lo tanto no hace falta tener uno para cada objeto.


---------------------------------------------------
LLAMADAS A PROPIEDADES DE OBJETOS QUE SON FUNCIONES
---------------------------------------------------
Cuando llamamos a la propiedad de un objeto que realmente es una función hay que utilizar los paréntesis:
Ej: el objeto es el siguiente			
	var elObjeto = new Object();
	elObjeto.id = "10";
	elObjeto.nombre = "Objeto de prueba";
	elObjeto.muestraId = function() {
		alert("El ID del objeto es "+ this.id);
	}
	elObjeto.muestraNombre = function() {
		alert(this.nombre);
	}
		
La llamada a la función interna se realizaría de la siguiente manera:
	alert(elObjeto.muestraId());
	
	
----------------------------------------------
CREAR MÉTODOS EN OBJETOS DEFINIDOS PREVIAMENTE
----------------------------------------------
(1) Crear el método directamente en el objeto.
(2) En lugar de crear la función se utiliza una ya existente. En el momento de hacer la declaración lo único que se indica es que la propiedad ejecutará
	una función. En el momento de invocar dicha propiedad deben utilizarse paréntesis, ya que se trata de una función.
(3) En lugar de crear la función se utiliza una ya existente. En el momento de hacer la declaración se realiza la ejecución del método que se asigna.
	Por lo que la propiedad almacenará un valor. En el momento de invocar dicha propiedad no deben utilizarse paréntesis ya que se trata de un valor.
	NOTA: almacenará un valor siempre y cuando el método/función que ejecute tenga un return.
(4) Se asigna una función externa, creada fuera del objeto. Este paso se puede realizar de dos formas, siguiendo el punto (2) y (3).

	//Se crea una función externa
	function obtieneFecha() {
		var f = new Date();
		alert("Fecha actual: "+f.getDate() + "/" + (f.getMonth() +1) + "/" + f.getFullYear());
		return this.idFactura; //Haría referencia al objeto que lo invocase, que debería tener una propiedad llamada idFactura.
	}
	//Se crea el objeto:
	function Factura(idFactura, idCliente)
	{
		this.idFactura = idFactura;	//Propiedad atributo.
		this.idCliente = idCliente;	//Propiedad atributo.
		
		//Se crea una propiedad que es un método:
	 (1)this.muestraCliente = function() {
			alert(this.idCliente);
		}
		
		//Se crea una propiedad que llama a una propiedad que es un método:
	 (2)this.muestraFuncion = this.muestraCliente;		//Apunta a una función, por lo que es una función y al invocar muestraFuncion deben utilizarse paréntesis.
	 (3)this.muestraFuncion2 = this.muestraCliente();	//Apunta a un valor (almacena un valor), por lo que no deben utilizarse paréntesis.

	 (4)this.fechaDeHoy = obtieneFecha;		//De la forma (2).
	 (4)this.fechaDeHoy2 = obtieneFecha();	//De la forma (3).
	 }
	 
	 
-------------------------------------------------
CREAR MÉTODOS EN OBJETOS NO DEFINIDOS PREVIAMENTE
-------------------------------------------------
	//Se crea el objeto.
	var elObjeto = new Object();
	elObjeto.id = "10";						//Se asigna una propiedad al objeto.
	elObjeto.nombre = "Objeto de prueba";	//Se asigna una propiedad al objeto.
	//Se crea una función y se asigna a una propiedad del objeto.
	elObjeto.muestraId = function() {
	  alert("El ID del objeto es "+ this.id);
	}
	//Se crea una función y se asigna a una propiedad del objeto.
	elObjeto.muestraNombre = function() {
	  alert(this.nombre);
	}

	//Se crea una función externa.
	function obtieneFecha() {
		var f = new Date();
		alert("Fecha actual: "+f.getDate() + "/" + (f.getMonth() +1) + "/" + f.getFullYear());
	}
	//Se asigna la función externa a una propiedad del objeto.
	elObjeto.fecha = obtieneFecha; //Esto se puede realizar siguiendo los puntos (2) ó (3) del apartado anterior.
	
	
------------------------------
AÑADIR PROPIEDADES A PROTOTYPE
------------------------------
Podemos añadir propiedades al prototype de una clase de la siguiente manera: (en este ejemplo se utilizará la clase Array)
Añadir una única propiedad:
	Array.prototype.obtenerElementoX = function(elemento) {
		alert(this[elemento]);
	}

Añadir varias propiedades.
	$.extend(Array.prototype, {
		obtenerElPrimero: function() {	
			alert("obtenerElPrimero");
			return this[0];
		},
		obtenerElementoX: function(elemento) {
			alert("obtenerElementoX");
			return this[elemento];
		}
	});

Para utilizarlas:
	arr.obtenerElPrimero();
	arr.obtenerElementoX(8);
	
NOTA: hay que tener en cuenta que para poder utilizar estas instrucciones (añadir varias propiedades) hay que añadir las siguientes librerías al documento HTML:
	<link href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css" rel="stylesheet">
	<script src="http://code.jquery.com/jquery-1.10.2.js"></script>
	<script src="http://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
Esto es debido a que se utilizan propiedades de los selectores de JQuery.