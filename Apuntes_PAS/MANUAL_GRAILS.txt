GRAILS / GROOVY MANUAL DE DESARROLLO DE CÓDIGO
==============================================
EQUIVALENCIAS GROOVY-GRAILS Y JAVA
==================================
Si queremos declarar el método index por defecto de Grails al estilo Java:
	public int index(){
		render "mensaje de prueba tradicional"
		println ("\n mensaje por consola tradicional")
		return 0
	} 
- NO puede ser void, debe retornar algo.
- Debe llevar el return 0, si no dará un NullPointerException.
- Si desde index llamamos a otro método, por ejemplo redirection (action:metodoA), puede declararse como 
	def metodoA = {}
  y TAMBIÉN como:
	def metodoA() {}
- Si una clase controller es de la siguiente forma:
class LibroController {
	def cosa1 = {
		println "cosa 1 ----------------->"
	}
}
	Cuando se llame al controller se ejecutará "cosa2" por defecto.
	
  Si es:
  class LibroController {
	def cosa1 = {
		println "cosa 1 ----------------->"
	}
	println "index"
	}
	def cosa2 = {
		println "cosa 2 ----------------->"
	}
}
	Cuando se llame al controlador no se ejecutará nada.
	
  Si es:
class LibroController {
	def cosa1 = {
		println "cosa 1 ----------------->"
	}
	
	def index = {
		println "index"
	}
	def cosa2 = {
		println "cosa 2 ----------------->"
	}
}
	Se ejecutará "index" al llamar al controlador.
	
- El controlador y el dominio se han de llamar igual sólo en el caso de quere utilizar scaffold.


******************************************************************************************************************************************************
-------------------------------------------------------------------------------------
INSTRUCCIONES PARA CONSULTAR TAMAÑO DE VECTORES, LISTS, ETC .../MOSTRAR SUS ELEMENTOS
-------------------------------------------------------------------------------------
Consulta
1)Consulta a tabla que devuelve varios elementos:
	def segape
	segape = Lloc.findAllByNomAndPrimerCognomAndSegonCognom("MARIA DEL CARMEN","TORRENT","SERRA")
 ->	println segape.size	
 
2)Mismo caso que antes, pero declarando la variable que contendrá los datos como vector:
	def segape = []
	segape = Lloc.findAllByNomAndPrimerCognomAndSegonCognom("MARIA DEL CARMEN","TORRENT","SERRA")
	println segape.size
	
	
Obtener/Imprimir datos:
1)En ambos casos para imprimir sus elementos:
	println "segape: " + segape.descripcioLlarga		//Se imprime por pantalla todo el vector: [PROFESSOR TITULAR D'UNIVERSITAT, PROF. ASSOCIAT LABORAL]
	println "segape: " + segape[0].descripcioLlarga		//Se imprime sólo un elemento del vector, el indicado.
	
2)Listar o recorrer todo el vector:
  Suponiendo que la instrucción: def llocTreball = Lloc.findAllByNom("MARIANO")
  Devuelve: [PROFESSOR TITULAR D'UNIVERSITAT, PROF. ASSOCIAT LABORAL, PROF. ASSOCIAT LABORAL]
  Es decir, el segundo y tercer elementos son iguales, si se utiliza:
	for (var in llocTreball) {
		println var.primerCognom
		println var.descripcioLlarga
	}
  Se realizarán tres iteraciones y tres impresiones, porque suponemos que el primer apellido es diferente en cada caso.
  
  Pero si se hace:
	for (var in llocTreball) {
		println var.descripcioLlarga
	}
  Se realizarán las tres iteraciones, pero al estar ordenados de manera que dos elementos repetidos van uno detrás de otr, sólo habrán dos 
  impresiones en pantalla, el elemento repetido NO se lista dos veces (o más).
  
  En el caso de que se hubieran devuelto de la siguiente manera: [PROF. ASSOCIAT LABORAL, PROFESSOR TITULAR D'UNIVERSITAT, PROF. ASSOCIAT LABORAL]
  Se obtendrían tres impresiones.

  
Métodos heredados:  
1)ADD: Para poder hacer un add se debe declarar la variable como:
	def lista = []
 
 
 
******************************************************************************************************************************************************
--------
UNIQUE()
--------
Sirve para eliminar elementos redundantes en una list. Se puede usar en código Groovy ó GSP.
Ejemplo:
	def mesosAny = ["Gener", "Gener", "Febrer", "Març", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre","Tots"]
	
	println mesosAny -> Imprimirá los meses repetidos.
	
	mesosAny.unique()
	
	println mesosAny -> Ya NO imprime los meses repetidos.
	
Ejemplo 2: bases de datos
**********
Tenemos una tabla con las personas de una empresa y su Departamento. Cada departamento tiene un código y en cada departamento puede haber más de una
persona, por lo que al listar toda la tabla de los trabajadores de la empresa, el código de departamento estará repetido.

	def totalPuestos = Lloc.createCriteria().list(query)
			
	// Stardot operator, per agafar tots els elements d'una llista d'una altra llista: http://groovy.codehaus.org/Collections		
	def listaUnidades = (totalPuestos*.codigoDepartamento).unique()
	
De esta manera conseguimos quedarnos únicamente con una lista de códigos de departamento, y el resto de campos de la clase del dominio Lloc se obvian.
	
	
<PARAMS>**********************************************************************************************************************************************
-------------------------------------------------------------------------
PASAR PARÁMETROS A FUNCIONES/CLOSURES (SIMILAR A LLAMAR A UN MÉTODO JAVA)
-------------------------------------------------------------------------
Se define la cabecera como:
	def generarExcel(def r, def resultList){
		println "generando excel"
		println "--"+r
		println "--"+resultList.nom
		println "***********************"
	}
Y en la llamada se usa:
	generarExcel(var1, var2)


Otros ejemplos:
public int getDaysBetween(def dStart, def dEnd)


--------------------------------------------------------------
PASAR DIVERSOS PARÁMETROS (PARAMS) A UN MÉTODO USANDO REDIRECT
--------------------------------------------------------------
	redirect(action: "iframeList", params: [ id: params.id, filtreTipusBossaHores: params.tipusBossa])

O bien para pasar todos los parámetros:
	redirect(action: "list", params: params)
	

----------------------
PARAMS SORT PÁGINA GSP
----------------------
Cuando se pulsa sobre el nombre de la columna de una tabla que es de tipo sortable (para ordenar por dicha columna), se devuelve al controlador en la
variable params el parámetro sort (params.sort) junto con el order. Esto, cuando se entra en el controlador debido a la pulsación del ratón sobre la
columna.

Cuando se entra en el controlador por otras causas que no sean debidas a querer ordenar por el campo de la columna params.sort es null y se cumplirá:
if(params.sort==null){...}
La condición será TRUE por lo que se ejecutará el if
	
--------------------------------------
PARAMS DESDE PÁGINA GSP AL CONTROLADOR
--------------------------------------
Parámetros enviados desde la página GSP al controlador.

En el caso que el elemento (textfield, etc ...) esté en estado disabled, en el controlador no se recibirá su valor.
Por ejemplo: <g:textField disabled="true" id="primerCognom" name="primerCognom" value="${params?.primerCognom}" class="cercaCognom width120px"/>
En el controlador params.primerCognom será no tendrá ningún valor.

En el caso de tener un campo en un desplegable con la forma:
		<g:select name="perfil" id="perfil" style="width:288px" keys="${tipusPerfilsList?.codi}" from="${tipusPerfilsList?.descripcio}" value="${personaInstance?.perfil}" />
En el que se envía un valor "perfil1", "perfil2" o bien la opción por defecto "". Al recuperarlo en el controlador, cuando no se recibe ningún perfil
la comparación para detectarlo es:
	if(params.perfil.toString().equals(""))


******************************************************************************************************************************************************
-------------------------------------------------
SYSTEM PROPERTIES/OBTENER PROPIEDADES DEL SISTEMA
-------------------------------------------------
Ejemplo:
	println System.getProperty("user.home")	//Directorio home del usuario. Ej: C:\Users\Jesus Campos

Se puede encontrar más información en: http://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html


******************************************************************************************************************************************************
--------------------------------
TRADUCIR CÓDIGOS A DESCRIPCIONES
--------------------------------
Como traducir código a descripción de un campo del cual su descripción se encuentra en otra tabla.

Leemos datos de una clase del dominio (Persona) que tiene su campo perfil como un código (números). Este código se corresponde con una descripción
almacenada en la clase del dominio Perfil. Para poder ver la traducción en pantalla:

GROOVY
******
Controlador:
	//Traducció del codi del perfil a descripció
	literalsPerfils = Perfil.getElementList(resultList.perfil, "descripcio")

Donde resultList es: resultList = InscripcioCardiovascular.createCriteria().list(params,query)
Y hay que modificar la clase del dominio Perfil añadiendo lo siguiente:
Dominio:
	public static String getElementProperty(String id, String property)
	{
		String cad
		
		def query =
		{
			and {
				eq("codi", id)
			}
		}
		
		try
		{
			def instance = this.createCriteria().list(query)
			cad = instance[0].getProperty(property).toString().trim();
		}
		catch(Exception e)
		{
			cad = "";
		}
		
		return cad;
	}
	
	public static ArrayList getElementList(ArrayList llista,String property)
	{
		ArrayList result = new ArrayList()
		for(int i = 0; i < llista.size(); i++)
		{
			result.add(this.getElementProperty(llista[i].toString(),property))
		}
		return result;
	}
}


GSP
***
	<g:each in="${resultList}" status="i" var="personaInstance">
		<tr id="tr${i}" class="${(i % 2) == 0 ? 'odd' : 'even'}">															
			<td class="padding width05p">
				${personaInstance.nif}
			</td>
			<td class="padding">
				${personaInstance.cognom1}
			</td>
			<td class="padding">
				${personaInstance.cognom2}
			</td>
			<td class="padding">
				${personaInstance.nom}
			</td>
			<td class="padding">
				${literalsPerfils[i]}
			</td>
		</tr>													
	</g:each>

Lo que sucede es que en el código groovy la lista, que recoge todos los códigos de la query en orden, son traducidos también en orden.

Este ejemplo ha sido sacado de la aplicación SIG (llocRiscContrller/iframeList), en la que se utilizaba lo siguiente:
Funcio solo contiene el código de riesgo por lo que debe obtener otros datos y por este motivo utiliza un bucle for.
	resultList = FuncioRisc.createCriteria().list(params,query)
	results = resultList.getTotalCount()

	//Riscos i literals per les disciplines i grups de risc
	for(int i = 0; i<resultList.size(); i++)
	{
		risc = Risc.findByCodi(resultList[i].codiRisc)
		riscInstanceList << risc
		literalsDisciplinaRisc.add(risc.disciplina.toString())
		literalsGrupRisc.add(risc.grup.toString())			
	}
	
	literalsDisciplinaRisc = TDisciplinaRisc.getElementList(literalsDisciplinaRisc, "descripcio")
	literalsGrupRisc = TGrupRisc.getElementList(literalsGrupRisc, "descripcio")
	
	
<INTERACCIÓN ELEMENTOS GSP>****************************************************************************************************************************
-----------------------
TEXTFIELD - G:TEXTFIELD
-----------------------
Cuando el textfield está vacío, es decir, no hay ninguna letra en su interior y se hace submit, al entrar al controlador ocurre lo siguiente:
	if(params.primerCognom){
		//...
	}else{
		//Entro aquí.
	}
	
Si en el controlador hago:
	filtrePrimerCognom = params.primerCognom ?: ''
	if(filtrePrimerCognom){
		//...
	}else{
		//Entro aquí.
	}
	
	
<VALORES>**********************************************************************************************************************************************
----------------------------
VALOR DEVUELTO EN UN SERVICE
----------------------------
Vamos a ver si devuelve nulo u otro valor un servicio. Si tenemos:
	@Transactional
	class UsuarioService {

		def serviceMethod() {
			println "[UsuarioService]::UsuarioService"
		}
		
		DataTestOne Login (userName){
			
			def query = {
				and{
					eq("nom", userName.toString())
				}
			}
			
			def persona = DataTestOne.createCriteria().list(query)
			
			if (persona){
				println "[UsuarioService]::UsuarioService:: Logeado correctamente"
			}
			else{
				println "[UsuarioService]::UsuarioService:: Usuario no logeado"
			}
				
			if (persona==null){
				println "[UsuarioService]::UsuarioService:: NULL"
			}
		}
	}

Y el controlador es:
	class Test01Controller {

		def usuarioService
		
		//También valdría def index = {
		def index () {
			usuarioService.serviceMethod()
			
			def p = usuarioService.Login("Jessus")
			
			if(p){
				println "[Test01Controller]::index:: Logeado correctamente."
			}
			else{
				println "[Test01Controller]::index:: Logeado NO correctamente."
			}
			
					
			if(p==null){
				println "[Test01Controller]::index:: NULL"
			}
		}
	}

Si el servicio no encuentra al usuario imprimirá tanto en el controlador como en el servicio que no se ha logeado, pero no imprimirá que es NULL. En 
cambio, en el controlador la variable "p" es null, por lo que sí se imprime que es null.

Al intentar imprimir el valor por pantalla de la variable "persona" se verá "[]".

Si se encuentra al usuario correctamente se imprimirá que se ha logeado tanto en el servicio como en el controlador.