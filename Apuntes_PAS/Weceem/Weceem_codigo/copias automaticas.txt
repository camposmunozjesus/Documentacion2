WECEEM - GENERACIÓN DE COPIAS AUTOMÁTICAS
=========================================
Se pretende que una vez iniciada la aplicación, se realicen copias de seguridad de los spaces de manera automática cada cierto tiempo.

1era versión:
GSP: views/wcmSpace/exportSpace.gsp se ñade el botón para ejecutar la acción (aún en pruebas)
	  <g:form controller="wcmSpace" method="post" params="[id:space.id]"
			action="performCpseg">
		<div class="dialog">
		  <table>
			<tbody>
			  <tr>
				<td colspan="2">
				  <input type="submit"class="button ui-state-default ui-corner-all" value="CPSEG"/>
				</td>
			  </tr>
			</tbody>
		  </table>
		</div>
	  </g:form>

En WcmSpaceController.groovy
	def performCpseg = {
		println "CPSEG1: " + WcmSpace.get(params.id)
		
//		log.debug "Starting export of space [${params.space}] - all params: ${params}"
		def space = WcmSpace.get(params.id)
//		assert wcmSecurityService.hasPermissions(space, [WeceemSecurityPolicy.PERMISSION_ADMIN])
//		log.debug "Export found space [${space}]"
		try {
			def file = wcmImportExportService.exportSpace(space, "simpleSpaceExporter")
			println file
////			log.debug "Exported space to temp file [${file}]"
//			response.contentType = wcmImportExportService.getExportMimeType("simpleSpaceExporter")
//			response.addHeader('WcmContent-Length', file.length().toString())
//			def contDisp = "attachment;filename=${space.name}.${FilenameUtils.getExtension(file.name)}"
////			log.debug "Returning exported space to client with content disposition: [${contDisp}]"
//			response.addHeader('Content-disposition', contDisp)
//			response.outputStream << file.readBytes() 
		} catch (Exception e) {
//			log.error "Could not export space ${params.space}", e
			// This is unlikely to work!
			println "ERROR: " + e.message

		}
	}
Hasta ahora se consigue tener el archivo y que no salga el diálogo de descarga.

MODIF: En lugar de meterse en el código fuente a fondo, lo que se hace es mover y cambiar el nombre al archivo final que hay en el temporal
	/* CPSEG - 20141103 */
	def performCpseg = {
		println "CPSEG1: " + WcmSpace.get(params.id)
		
		println "executenado CPSEG - executeBackup"
		def ts = new SimpleDateFormat('yyyyMMdd'+'_'+'HHmm').format(new Date())
		println "fecha:"+ts
		
//		log.debug "Starting export of space [${params.space}] - all params: ${params}"
		def space = WcmSpace.get(params.id)
//		assert wcmSecurityService.hasPermissions(space, [WeceemSecurityPolicy.PERMISSION_ADMIN])
//		log.debug "Export found space [${space}]"
		try {
			def file = wcmImportExportService.exportSpace(space, "simpleSpaceExporter")
			println file
			 
    	   if(file.renameTo(new File("E:/weceem/cpseg/"+space.name+"_"+ts+".zip"))){
    		System.out.println("File is moved successful!");
    	   }else{
    		System.out.println("File is failed to move!");
    	   }
		   
////			log.debug "Exported space to temp file [${file}]"
//			response.contentType = wcmImportExportService.getExportMimeType("simpleSpaceExporter")
//			response.addHeader('WcmContent-Length', file.length().toString())
//			def contDisp = "attachment;filename=${space.name}.${FilenameUtils.getExtension(file.name)}"
////			log.debug "Returning exported space to client with content disposition: [${contDisp}]"
//			response.addHeader('Content-disposition', contDisp)
//			response.outputStream << file.readBytes()
		} catch (Exception e) {
//			log.error "Could not export space ${params.space}", e
			// This is unlikely to work!
			println "ERROR: " + e.message

		}
    }

MODIF: método definitivo. Realiza un zip de cada Space. En el caso de utilizarlo con un botón en una página web.
	/* CPSEG - 20141104 */
	def performCpseg = {
		println "performCpseg: " + WcmSpace.list()
		
		def ts = new SimpleDateFormat('yyyyMMdd'+'_'+'HHmm').format(new Date())
		println "***********************************************"
		WcmSpace.list().each {  space ->
			println space	//Esto ya es un space.
			try {
				def file = wcmImportExportService.exportSpace(space, "simpleSpaceExporter")				 				
				def finalFile = new File("D:/cpseg/"+space.name+"_"+ts+".zip")
				if(file.renameTo(finalFile)){
					println ("File is moved successful to "+finalFile);
					println "*********************END***********************"
				}else{
					log.error("File is failed to move!");
				}
			} catch (Exception e) {
	//			log.error "Could not export space ${params.space}", e
				// This is unlikely to work!
				log.error "ERROR: " + e.message
	
			}			
		}
    }
	
---------------------------------
AUTOMATIZADO CON QUARTZ EN WECEEM
---------------------------------
Tenemos la suerte de que el plugin weceem (el que está en .links) tiene instalado ya el plugin Quartz, que sirve para programar tareas, como si del
CRONTAB de Linux se tratase. Ahora las copias se realizan cada 20 segundos, y la primera de ellas es a los 2 segundos de haber arrancado el CMS.

Para crear el programador nos situamos sobre la carpeta "Jobs" (C:\Users\Jesus Campos\.grails\2.3.4\projects\weceem\plugins\weceem-1.2\grails-app\jobs\org\weceem\jobs\)
y se crea un nuevo archivo groovy. El nombre de dicho archivo debe finalizar en Job (tal y como un controlador debe acabar en Controller). En este caso
lo hemos llamado "SpaceBackupJob.groovy".

El código de dicho archivo groovy es el siguiente:
	package org.weceem.jobs

	import java.text.SimpleDateFormat
	import org.weceem.content.*
	import org.weceem.export.*

	class SpaceBackupJob {

		def wcmImportExportService
		
		static triggers = {
			simple name: 'spacebackup', startDelay: 2000, repeatInterval: 20000
		  }
		  def group = "spacebackupGroup"
		  def description = "To do a backup of all spaces in weceem"
		
		def execute(){ 
			println "performCpseg: " + WcmSpace.list()
			
			def ts = new SimpleDateFormat('yyyyMMdd'+'_'+'HHmm').format(new Date())
			println "***********************************************"
			WcmSpace.list().each {  space ->

				if (space.id == 7){
					println space	//Esto ya es un space.
					try {
						def file = wcmImportExportService.exportSpace(space, "simpleSpaceExporter")
						def finalFile = new File("D:/cpseg/"+space.name+"_"+ts+".zip")
						if(file.renameTo(finalFile)){
							println ("File is moved successful to "+finalFile);
							println "*********************END***********************"
						}else{
							log.error("File is failed to move!");
						}
					} catch (Exception e) {
			//			log.error "Could not export space ${params.space}", e
						// This is unlikely to work!
						log.error "ERROR: " + e.message
		
					}
				}
			}
		}	
	}



*****************************************************************************************************************************************************
------------------------------
Creación:	03-11-2014

Jesús Campos Muñoz
jesus.campos@upc.edu
------------------------------