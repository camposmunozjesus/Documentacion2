WECEEM 1.3M1/1.3M2 - NOTAS PARA SU INSTALACIÓN (CÓDIGO FUENTE)
==============================================================
En el zip weceem-app-master del código fuente de la versión Weceem 1.3M2 no se consiguen descargar todas las dependencias.
Motivo: el repositorio NO es capaz de descargar la versión Weceem 1.3M2, por lo que en el buildconfig hay que cambiarlo por Weceem 1.3M1.

Una vez solucionado esto, la aspa roja e el proyecto se debe a que hay una duplicidad de archivos (en markers se indica bastante bien este problema). Los
dos archivos siguientes están repetidos:
/weceem-app-master/.link_to_grails_plugins/weceem-1.3-M1/src/java/com/jcatalog/wiki/block/ParagraphBlock.java
C:\Users\Jesus Campos\.grails\2.4.3\projects\weceem\plugins\weceem-1.3-M1\src\java\com\jcatalog\wiki\block\ParagraphBlock.java

/weceem-app-master/.link_to_grails_plugins/weceem-1.3-M1/src/java/com/jcatalog/wiki/WeceemDialect.java
C:\Users\Jesus Campos\.grails\2.4.3\projects\weceem\plugins\weceem-1.3-M1\src\java\com\jcatalog\wiki\WeceemDialect.java

Hay que eliminarlos de esta ubicación.



*******************************************************************************************************************************************************
----------------------------------------------------------------------------------
CAMBIAR EL NOMBRE DE LA APLICACIÓN (NOMBRE VISIBLE AL DESPLEGAR Y EN ECLIPSE/GGTS)
----------------------------------------------------------------------------------
Es recomendable realizarlo antes de cambiar cosas en los controladores/taglibs/servicios de los plugin debido a que cuando se cambia el nombre y la
ubicación de los plugin (C:\User\User_name\.grails\.link_to_plugins\ ... ) éstos se vuelven a descargar y hay que hacer de nuevo dichos cambios.

Para cambiar el nombre de la aplicación (visible al desplegar):
Crear un directorio con el nuevo nombre y copiarlo todo (en el workspace).
Hay que ir al archivo application.properties:
app.name=Portal
app.version=1.2-M1

Para cambiar el nombre de la aplicación qu se ve en Eclipse hay que ir al archivo .project que se encuentra en la raíz del proyecto (en Eclipse/GGTS se ve en el Navigator) y modificar:
<projectDescription>
	<name>weceem-app-master</name>
	.......
	<linkedResources>
		<link>
			<name>.link_to_grails_plugins</name>
			<type>2</type>
			<locationURI>GRAILS_ROOT/2.3.4/projects/weceem/plugins</locationURI>
			......
<name> se debe modificar.
Donde "weceem" es el nombre del directorio que tendrá la aplicación para los plugins que descargur, que es una de las partes a modificar.


<BD:POSTGRESQL>****************************************************************************************************************************************
Para descargar los conectores de la base de datos incluir en el BuildConfig.groovy:
	dependencies {
		...
		runtime 'org.postgresql:postgresql:9.3-1100-jdbc41'
	}
	
----------
DATASOURCE
----------
dataSource {
    pooled = true
    jmxExport = true
//    driverClassName = "org.h2.Driver"
	driverClassName = "org.postgresql.Driver"
//    username = "sa"
//    password = ""
}

hibernate {
    cache.use_second_level_cache = true
    cache.use_query_cache = false
    cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory' // Hibernate 3
//    cache.region.factory_class = 'org.hibernate.cache.ehcache.EhCacheRegionFactory' // Hibernate 4
    singleSession = true // configure OSIV singleSession mode
    flush.mode = 'manual' // OSIV session flush mode outside of transactional context
}

// environment specific settings
environments {
	development {
		dataSource {
			dbCreate = "update" // one of 'create', 'create-drop','update'
			url = "jdbc:postgresql://localhost:5432/weceem13m1"
						username = "jesus"
						password = "jesus"
		}
	}
	test {
			dataSource {
			dbCreate = "update"
			url = "jdbc:postgresql://localhost:5432/weceem13m1"
						username = "jesus"
						password = "jesus"
		}
	}
    production {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE"
            properties {
                maxActive = -1
                minEvictableIdleTimeMillis=1800000
                timeBetweenEvictionRunsMillis=1800000
                numTestsPerEvictionRun=3
                testOnBorrow=true
                testWhileIdle=true
                testOnReturn=false
                validationQuery="SELECT 1"
                jdbcInterceptors="ConnectionState"
            }
//            logSql = true
        }
    }
}



<CONFIG.GROOVY>****************************************************************************************************************************************
--------------------------------------------------
DESHABILITAR EL CACHE DE LAS PÁGINAS EN MODO VISTA
--------------------------------------------------
En el archivo Config.groovy se descomenta la siguiente línea:
cache.headers.enabled = false

------------------------------------------------------
ESTABLECER UNA DIRECCIÓN ACCESIBLE DESDE OTRO TERMINAL
------------------------------------------------------
En este caso adaptar el proyecto para que sea accesible desde el terminal móvil.
En el archivo Config.groovy en el apartado de environments { development { ...} ...} poner:
	grails.serverURL = "http://pc24094.upc.es:8090/weceem"
	
	

<SEGURIDAD>********************************************************************************************************************************************
Este apartado es bueno hacerlo después de configurar la base de datos debido a que se ha realizado después de conectar con ORACLE y ha fallado, y al 
deshacer los pasos no ha sido posible volver a hacer funcionar el proyecto.

Deshacer esta operación no es tan simple como deshacer los pasos realizados.

--------------------------------------------------------
ELIMINAR EL SPRING SECURITY POR DEFECTO DE LA APLICACIÓN
--------------------------------------------------------
Config.groovy comentar:
	- La definición weceem.springsecurity.details.mapper.
	- La definición grails { plugin { springsecurity ...
	
BootStrap.groovy comentar:
	-   if (!CMSRole.findByAuthority('ROLE_USER')) {
			assert new CMSRole(authority: 'ROLE_USER', description: 'User role').save(flush:true)
		}
		if (!CMSRole.findByAuthority('ROLE_ADMIN')) {
			assert new CMSRole(authority: 'ROLE_ADMIN', description: 'Admin role').save(flush:true)
		}

		if (!CMSUser.findByUsername('admin')) {
			assert new CMSUser(username: 'admin', firstName: 'admin', lastName: '',
					passwd: "${springSecurityService.encodePassword('admin', 'admin')}",
					email: 'admin@admin.com',
					enabled: true)
					.addToAuthorities(CMSRole.findWhere(authority: 'ROLE_ADMIN'))
					.addToAuthorities(CMSRole.findWhere(authority: 'ROLE_USER'))
					.save(flush:true)
		} 
		
BuildConfig.groovy comentar:
	- //compile ":weceem-spring-security:1.3-M2"
	
	
	
<DOMINIO>**********************************************************************************************************************************************
------------------------------
MODIFICACIÓN DE WCMHTMLCONTENT
------------------------------   
Para que el buscador funcione debidamente en WcmHTMLContent el siguiente apartado debe quedar como sigue:
	static searchable = {
        alias WcmHTMLContent.name.replaceAll("\\.", '_')
        only = ['content', 'keywords', 'htmlTitle', 'menuTitle', 'title', 'status']
    }
	
------------------------------------------------------------------------
GENERACIÓN DE LOS ELEMENTOS PERSONALIZADOS DEL DOMINIO: PLANTILLAS FICHA
------------------------------------------------------------------------
Generar los elementos personalizados del dominios propios con las siguientes instrucciones:
	create-content-class com.upc.WcmPlantillaFitxa
	create-content-class com.upc.WcmPlantillaFitxaGenerica
	create-content-class com.upc.WcmPlantillaFitxaGenerica2Col
	
-------------------------
COM.UPC.WCMPLANTILLAFITXA
-------------------------
package com.upc

import java.util.Map;

import org.weceem.content.WcmContent
import org.weceem.content.TemplateUtils
import org.weceem.content.WcmTemplate;
import org.weceem.util.ContentUtils

/**
 * This is your Weceem content domain class. See the documentation at http://weceem.org for full details
 *
 * Summary: Add normal GORM properties for your custom content fields, including any relationships you need.
 * For non-standard types or associations you will need to implement custom wcm:editorXXXX tags to provide
 * editors for these. See the Weceem Plugin source for details (EditorTagLib.groovy)
 */
class WcmPlantillaFitxa extends WcmContent {

	
	static searchable = {
		alias WcmPlantillaFitxa.name.replaceAll("\\.", '_')
		only = ['content', 'keywords', 'htmlTitle', 'menuTitle', 'title', 'status']
	}
	
	Boolean allowGSP = false
	
	String keywords
	WcmTemplate template

	// 64Kb Unicode text with HTML/Wiki Markup
	String content = "<!-- Per esborrar un desplegable: --><!-- Seleccionar des del comentari INICI Quadre desplegable del tipus desitjat  --><!-- fins al comentari FINAL Quadre desplegable del mateix tipus i esborrar-lo. --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable SOLICITUD ****************** --><div class=\"selectedTitol\" id=\"box_solicitud\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_solicitud\">    Qui ho pot sol&middot;licitar</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_solicitud\">  <div>    Contingut de &quot;Qui ho pot sol&middot;licitar&quot;</div></div><!-- ****************** FINAL Quadre desplegable SOLICITUD ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable DESCRIPCIO ********************* --><div class=\"selectedTitol\" id=\"box_descripcio\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_descripcio\">    Descripci&oacute;</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_descripcio\">  <div>    Contingut de &quot;Descripci&oacute;&quot;</div></div><!-- ****************** FINAL Quadre desplegable DESCRIPCIO ********************* --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable TRAMITAR  ****************** --><div class=\"selectedTitol\" id=\"box_tramitar\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_tramitar\">    Com tramitar-ho</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_tramitar\">  <div>    Contingut de &quot;Com tramitar-ho&quot;</div></div><!-- ****************** FINAL Quadre desplegable TRAMITAR  ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable ADJUNTAR  ****************** --><div class=\"selectedTitol\" id=\"box_adjuntar\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_adjuntar\">    Documentaci&oacute; que cal adjuntar</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_adjuntar\">  <div>    Contingut de &quot;Documentaci&oacute; que cal adjuntar&quot;</div></div><!-- ****************** FINAL Quadre desplegable ADJUNTAR  ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable COMPTE  ****************** --><div class=\"selectedTitol\" id=\"box_compte\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_compte\">    Cal tenir en compte que...</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_compte\">  <div>    Contingut de &quot;Cal tenir en compte que...&quot;</div></div><!-- ****************** FINAL Quadre desplegable COMPTE  ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable ENLLACOS  ****************** --><div class=\"selectedTitol\" id=\"box_enllacos\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_enllacos\">    Enlla&ccedil;os d&#39;inter&egrave;s</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_enllacos\">  <div>    Contingut de &quot;Enlla&ccedil;os d&#39;inter&egrave;s&quot;</div></div><!-- ****************** FINAL Quadre desplegable ENLLACOS  ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable NORMATIVA ****************** --><div class=\"selectedTitol\" id=\"box_normativa\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_normativa\">    Normativa de refer&egrave;ncia</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_normativa\">  <div>    Contingut de &quot;Normativa de refer&egrave;ncia&quot;</div></div><!-- ****************** FINAL Quadre desplegable NORMATIVA ****************** --><!-- ************************************************************************* --><!-- ****************** INICI Quadre desplegable CONSULTA  ****************** --><div class=\"selectedTitol\" id=\"box_consulta\"><!-- T\u00edtol del desplegable -->  <div class=\"minus\" id=\"title_box_consulta\">    Per fer una consulta...</div></div><!-- Contingut del desplegable --><div class=\"dsplContent\" id=\"dsplContent_box_consulta\">  <div>    Contingut de &quot;Per fer una consulta...&quot;</div></div><!-- ****************** FINAL Quadre desplegable CONSULTA  ****************** -->"
	
	String menuTitle
	String htmlTitle

	@Override
	String getHardDependencies() {
		// A template is an implicit dependency for the node, any changes to the template or its deps
		// means we have to change too.
		def t = TemplateUtils.getTemplateForContent(this)
		return t ? t.absoluteURI : ''
	}

	/**
	 * Must be overriden by content types that can represent their content as text.
	 * Used for search results and versioning
	 */
	public String getContentAsText() { ContentUtils.htmlToText(content) }

	/**
	 * Should be overriden by content types that can represent their content as HTML.
	 * Used for wcm:content tag (content rendering)
	 */
	public String getContentAsHTML() { content }
	
	Map getVersioningProperties() {
		def r = super.getVersioningProperties() + [
			menuTitle:menuTitle,
			htmlTitle:htmlTitle,
			keywords:keywords,
			template:template?.ident() // Is this right?
		]
		return r
	}
	
	String getMimeType() { "text/html; charset=UTF-8" }
	
	static handleRequest = { content ->
		if (content.allowGSP) {
			renderGSPContent(content)
		} else {
			renderContent(content)
		}
	}
	
	static constraints = {
		content(nullable: false, maxSize: WcmContent.MAX_CONTENT_SIZE)
		keywords(nullable: true, blank: true, maxSize: 200)
		menuTitle(nullable: true, blank: true, maxSize: 40)
		htmlTitle(nullable: true, blank: true, maxSize: 400)
		allowGSP(nullable: true)
		template(nullable: true)
		status(nullable: false) // Workaround for Grails 1.1.1 constraint inheritance bug
	}

	static mapping = {
		cache usage:'read-write', include: 'non-lazy'
		template cascade: 'all', lazy: false // we never want proxies for this
		columns {
			content type:'text'
			htmlTitle type:'text'
		}
	}

	static editors = {
		template(group:'extra')
		menuTitle(group:'extra')
		htmlTitle(group:'extra')
		content(editor:'HTMLContent')
		keywords(group:'meta')
	}

	static transients = WcmContent.transients + [ 'summary']

	static icon = [plugin: "weceem", dir: "_weceem/images/weceem/content-icons", file: "html-file-32.png"]

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForMenu() { menuTitle ?: title }

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForHTML() { htmlTitle ?: title }

	public String getSummary() {
		def summaryString = ""
		def parts = content.split("<")
		parts.each() {
			def modified = it.substring(it.indexOf(">") + 1)
			if (modified) summaryString += modified
		}

		if (content && summaryString.length() >= 100) {
			summaryString = summaryString.substring(0, 99)
			summaryString = summaryString.substring(0, summaryString.lastIndexOf(" "))
		}

		return summaryString
	}

}

---------------------------------
COM.UPC.WCMPLANTILLAFITXAGENERICA
---------------------------------
package com.upc

import java.util.Map;

import org.weceem.content.WcmContent
import org.weceem.content.TemplateUtils
import org.weceem.content.WcmTemplate;
import org.weceem.util.ContentUtils

/**
 * This is your Weceem content domain class. See the documentation at http://weceem.org for full details
 * 
 * Summary: Add normal GORM properties for your custom content fields, including any relationships you need.
 * For non-standard types or associations you will need to implement custom wcm:editorXXXX tags to provide
 * editors for these. See the Weceem Plugin source for details (EditorTagLib.groovy)
 */
class WcmPlantillaFitxaGenerica extends WcmContent {
	
	
	static searchable = {
		alias WcmPlantillaFitxaGenerica.name.replaceAll("\\.", '_')
		only = ['content', 'keywords', 'htmlTitle', 'menuTitle', 'title', 'status']
	}
	
	Boolean allowGSP = false
	
	String keywords
	WcmTemplate template

	// 64Kb Unicode text with HTML/Wiki Markup
	String content = "<!-- ************ INICI 1ER DESPLEGABLE ************ --><div class=\"selectedTitol\" id=\"box_101\">  <!-- T\u00edtol Desplegable 1 -->  <div class=\"minus\" id=\"title_box_101\">    T\u00cdTOL 1  </div></div><div class=\"dsplContent\" id=\"dsplContent_box_101\">  <!-- Contingut Desplegable 1 -->  <div>    Contingut  </div>  </div><!-- ************ FINAL 1ER DESPLEGABLE ************ --><!-- ************ INICI 2ON DESPLEGABLE ************ --><div class=\"selectedTitol\" id=\"box_102\">  <!-- T\u00edtol Desplegable 2 -->  <div class=\"minus\" id=\"title_box_102\">    T\u00cdTOL 2  </div></div><div class=\"dsplContent\" id=\"dsplContent_box_102\">  <!-- Contingut Desplegable 2 -->  <div>    Contingut  </div></div><!-- ************ FINAL 2ON DESPLEGABLE ************ --><!-- Per afegir un desplegable seleccionar el codi compr\u00e9s entre INICI 1ER      --><!-- DESPLEGABLE i FINAL 1ER DESPLEGABLE i canviar, en els atributs id dels     --><!-- divisors DIV, el nombre que segueix a box_, title_box_ y dsplContent_box_ per --><!-- un altre que no existeixi. En el cas de voler posar icones en la part esquerra del --><!-- desplegable existeix l'opci\u00f3 de substituir el nombre per una de les sig\u00fcents --><!-- paraules: solicitud, descripcio, tramitar, adjuntar, compte, enllacos, normativa --> <!-- i consulta. --><!-- Exemple: --><!--   <div class=\"selectedTitol\" id=\"box_consulta\"> --><!--     <div class=\"minus\" id=\"title_box_consulta\"> --><!--       T\u00cdTOL 1 --><!--     </div> --><!--   </div> --><!--   <div class=\"dsplContent\" id=\"dsplContent_box_consulta\"> --><!--     <div> --><!--       Contingut --><!--     </div>   --><!--   </div> --><!-- De la mateixa manera que el nombre que acompanya als id: box_, title_box_  --><!-- i dsplContent_box_ no es pot repetir en una fitxa o p\u00e0gina HTML, no \u00e9s      --><!-- possible repetir les paraules de la llista anterior en una fitxa o  p\u00e0gina. -->"
	
	String menuTitle
	String htmlTitle

	@Override
	String getHardDependencies() {
		// A template is an implicit dependency for the node, any changes to the template or its deps
		// means we have to change too.
		def t = TemplateUtils.getTemplateForContent(this)
		return t ? t.absoluteURI : ''
	}

	/**
	 * Must be overriden by content types that can represent their content as text.
	 * Used for search results and versioning
	 */
	public String getContentAsText() { ContentUtils.htmlToText(content) }

	/**
	 * Should be overriden by content types that can represent their content as HTML.
	 * Used for wcm:content tag (content rendering)
	 */
	public String getContentAsHTML() { content }
	
	Map getVersioningProperties() {
		def r = super.getVersioningProperties() + [
			menuTitle:menuTitle,
			htmlTitle:htmlTitle,
			keywords:keywords,
			template:template?.ident() // Is this right?
		]
		return r
	}
	
	String getMimeType() { "text/html; charset=UTF-8" }
	
	static handleRequest = { content ->
		if (content.allowGSP) {
			renderGSPContent(content)
		} else {
			renderContent(content)
		}
	}
	
	static constraints = {
		content(nullable: false, maxSize: WcmContent.MAX_CONTENT_SIZE)
		keywords(nullable: true, blank: true, maxSize: 200)
		menuTitle(nullable: true, blank: true, maxSize: 40)
		htmlTitle(nullable: true, blank: true, maxSize: 400)
		allowGSP(nullable: true)
		template(nullable: true)
		status(nullable: false) // Workaround for Grails 1.1.1 constraint inheritance bug
	}

	static mapping = {
		cache usage:'read-write', include: 'non-lazy'
		template cascade: 'all', lazy: false // we never want proxies for this
		columns {
			content type:'text'
			htmlTitle type:'text'
		}
	}

	static editors = {
		template(group:'extra')
		menuTitle(group:'extra')
		htmlTitle(group:'extra')
		content(editor:'HTMLContent')
		keywords(group:'meta')
	}

	static transients = WcmContent.transients + [ 'summary']

	static icon = [plugin: "weceem", dir: "_weceem/images/weceem/content-icons", file: "html-file-32.png"]

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForMenu() { menuTitle ?: title }

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForHTML() { htmlTitle ?: title }

	public String getSummary() {
		def summaryString = ""
		def parts = content.split("<")
		parts.each() {
			def modified = it.substring(it.indexOf(">") + 1)
			if (modified) summaryString += modified
		}

		if (content && summaryString.length() >= 100) {
			summaryString = summaryString.substring(0, 99)
			summaryString = summaryString.substring(0, summaryString.lastIndexOf(" "))
		}

		return summaryString
	}

}

-------------------------------------
COM.UPC.WCMPLANTILLAFITXAGENERICA2COL
-------------------------------------
package com.upc

import java.util.Map;

import org.weceem.content.WcmContent
import org.weceem.content.TemplateUtils
import org.weceem.content.WcmTemplate;
import org.weceem.util.ContentUtils

/**
 * This is your Weceem content domain class. See the documentation at http://weceem.org for full details
 * 
 * Summary: Add normal GORM properties for your custom content fields, including any relationships you need.
 * For non-standard types or associations you will need to implement custom wcm:editorXXXX tags to provide
 * editors for these. See the Weceem Plugin source for details (EditorTagLib.groovy)
 */
class WcmPlantillaFitxaGenerica2Col extends WcmContent {
	
	
	static searchable = {
		alias WcmPlantillaFitxaGenerica2Col.name.replaceAll("\\.", '_')
		only = ['content', 'keywords', 'htmlTitle', 'menuTitle', 'title', 'status']
	}
	
	Boolean allowGSP = false
	
	String keywords
	WcmTemplate template

	// 64Kb Unicode text with HTML/Wiki Markup
	String content = "<!-- Per afegir un desplegable cal copiar des del comentari INICI 1ER DESPLEGABLE ... --><!-- fins el comentari de FINAL 1ER DESPLEGABLE ... , i enganxar-lo just despr\u00e9s --><!-- del comentari FINAL n DESPLEGABLE ... que es vulgui.  --><!-- Canviar en els atributs id dels divisors DIV, el nombre que segueix a box_, --><!-- title_box_ y dsplContent_box_ per un que no existeixi. --><div class=\"row no-scroll-bar columnas-dobles\">  <!-- ************************  INICI PRIMERA COLUMNA ************************  -->  <div class=\"col-vxs-6 col-sm-6 col-md-6 col-lg-6 row-margin-bottom-col1\">    <!-- ********** INICI 1ER DESPLEGABLE COLUMNA #1 ********** -->    <div class=\"selectedTitol\" id=\"box_101\">    <!-- T\u00edtol Desplegable 1 -->      <div class=\"minus\" id=\"title_box_101\">        T\u00cdTOL 1</div>    </div>    <div class=\"dsplContent\" id=\"dsplContent_box_101\">      <!-- Contingut Desplegable 1 -->    <div>Contingut</div>      </div> <!-- ************ FINAL 1ER DESPLEGABLE COLUMNA #1************ -->      <!-- ********** INICI 2ON DESPLEGABLE COLUMNA #1 ********** -->    <div class=\"selectedTitol\" id=\"box_102\">    <!-- T\u00edtol Desplegable 2 -->      <div class=\"minus\" id=\"title_box_102\">        T\u00cdTOL 2</div>    </div>    <div class=\"dsplContent\" id=\"dsplContent_box_102\">    <!-- Contingut Desplegable 2 -->      <div>Contingut</div>    </div>    <!-- ************ FINAL 2ON DESPLEGABLE COLUMNA #1************ -->  </div> <!-- ************************   FINAL PRIMERA COLUMNA ************************  --> <!-- --><!-- ************************  INICI SEGONA COLUMNA ************************  -->  <div class=\"col-vxs-6 col-sm-6 col-md-6 col-lg-6\">    <!-- ********** INICI 1ER DESPLEGABLE COLUMNA #2 ********** -->       <div class=\"selectedTitol\" id=\"box_201\">    <!-- T\u00edtol Desplegable 1 -->      <div class=\"minus\" id=\"title_box_201\">        T\u00cdTOL 1</div>    </div>    <div class=\"dsplContent\" id=\"dsplContent_box_201\">      <!-- Contingut Desplegable 1 -->    <div>Contingut</div>      </div> <!-- ************ FINAL 1ER DESPLEGABLE COLUMNA #2************ --> <!-- ********** INICI 2ON DESPLEGABLE COLUMNA #2 ********** -->    <div class=\"selectedTitol\" id=\"box_202\">    <!-- T\u00edtol Desplegable 2 -->      <div class=\"minus\" id=\"title_box_202\">        T\u00cdTOL 2</div>    </div>    <div class=\"dsplContent\" id=\"dsplContent_box_202\">    <!-- Contingut Desplegable 2 -->      <div>Contingut</div>    </div>    <!-- ************ FINAL 2ON DESPLEGABLE COLUMNA #2 ************ -->    </div>  <!-- ************************   FINAL SEGONA COLUMNA ************************  --></div>"
	String menuTitle
	String htmlTitle

	@Override
	String getHardDependencies() {
		// A template is an implicit dependency for the node, any changes to the template or its deps
		// means we have to change too.
		def t = TemplateUtils.getTemplateForContent(this)
		return t ? t.absoluteURI : ''
	}

	/**
	 * Must be overriden by content types that can represent their content as text.
	 * Used for search results and versioning
	 */
	public String getContentAsText() { ContentUtils.htmlToText(content) }

	/**
	 * Should be overriden by content types that can represent their content as HTML.
	 * Used for wcm:content tag (content rendering)
	 */
	public String getContentAsHTML() { content }
	
	Map getVersioningProperties() {
		def r = super.getVersioningProperties() + [
			menuTitle:menuTitle,
			htmlTitle:htmlTitle,
			keywords:keywords,
			template:template?.ident() // Is this right?
		]
		return r
	}
	
	String getMimeType() { "text/html; charset=UTF-8" }
	
	static handleRequest = { content ->
		if (content.allowGSP) {
			renderGSPContent(content)
		} else {
			renderContent(content)
		}
	}
	
	static constraints = {
		content(nullable: false, maxSize: WcmContent.MAX_CONTENT_SIZE)
		keywords(nullable: true, blank: true, maxSize: 200)
		menuTitle(nullable: true, blank: true, maxSize: 40)
		htmlTitle(nullable: true, blank: true, maxSize: 400)
		allowGSP(nullable: true)
		template(nullable: true)
		status(nullable: false) // Workaround for Grails 1.1.1 constraint inheritance bug
	}

	static mapping = {
		cache usage:'read-write', include: 'non-lazy'
		template cascade: 'all', lazy: false // we never want proxies for this
		columns {
			content type:'text'
			htmlTitle type:'text'
		}
	}

	static editors = {
		template(group:'extra')
		menuTitle(group:'extra')
		htmlTitle(group:'extra')
		content(editor:'HTMLContent')
		keywords(group:'meta')
	}

	static transients = WcmContent.transients + [ 'summary']

	static icon = [plugin: "weceem", dir: "_weceem/images/weceem/content-icons", file: "html-file-32.png"]

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForMenu() { menuTitle ?: title }

	/**
	 * Overriden to return caption for menu items, if supplied
	 */
	public String getTitleForHTML() { htmlTitle ?: title }

	public String getSummary() {
		def summaryString = ""
		def parts = content.split("<")
		parts.each() {
			def modified = it.substring(it.indexOf(">") + 1)
			if (modified) summaryString += modified
		}

		if (content && summaryString.length() >= 100) {
			summaryString = summaryString.substring(0, 99)
			summaryString = summaryString.substring(0, summaryString.lastIndexOf(" "))
		}

		return summaryString
	}

}



<TAGS>*************************************************************************************************************************************************
---------
UPCTAGLIB
---------
TAG que contiene el elemento buscador:
package com.upc.tags
import org.weceem.content.RenderEngine

class UpcTagLib {

	static ATTR_RESULTSPATH = "resultsPath"
	
	static namespace = "upc"
	
	def search = { attrs ->
		//REV-005- Poder cambiar el nombre y el estilo de la herramienta Search.
		def buttonName = attrs['caption'] ?:'Cerca'
		def spaceAlias = request[RenderEngine.REQUEST_ATTRIBUTE_SPACE].aliasURI
		def resPath = attrs.remove(ATTR_RESULTSPATH)
		def p = resPath ? [resultsPath:spaceAlias+'/'+resPath] : [:]
		// Search the current space only
		p.uri = spaceAlias+'/'
		def base = attrs.remove('baseURI')
		if (base) {
			p.uri += base
		}
		// Copy the rest of attribs over
		p.putAll(attrs)
		
		out << g.form(controller:'wcmSearch', action:'search', params:p) {
			out << upc.searchField(attrs)
			//REV-005- Poder cambiar el nombre y el estilo de la herramienta Search.
			out << g.submitButton(name:'submit', class:'customSearchButton', value:buttonName)
		}
	}
	
	def searchField = { attrs ->
		//REV-006- Poder incluir un placeHolder y determinar su comportamiento.
		/* PlaceHolder: texto que aparece en el textbox del Search. Se utiliza el atributo placeHolder="Texto a mostrar ..."
		 * Ej: <upc:search placeHolder="Buscar ..." types="org.weceem.html.WcmHTMLContent,org.weceem.blog.WcmBlogEntry,org.weceem.content.WcmComment"></upc:search>
		 * El texto puede desaparecer al hacer click en el textbox (no indicando el atributo erasePlaceHolder o 
		 * erasePlaceHolder="yes"). erasePlaceHolder="no" hará que el placeHolder aparezca cuando se escriba en el 
		 * textbox cuando pierda el foco y no haya nada escrito en él.
		 * Ej: <upc:search placeHolder="Buscar ..." erasePlaceHolder="NO" types="org.weceem.html.WcmHTMLContent,org.weceem.blog.WcmBlogEntry,org.weceem.content.WcmComment"></upc:search>
		 */
		def initialText = attrs['placeHolder'] ?:''
		
		def placeHolderEraseOnClick
		if(!attrs['erasePlaceHolder'] || attrs['erasePlaceHolder'].toString().toLowerCase().equals("yes") ){
			placeHolderEraseOnClick = "this.placeholder = ''"
		}
		else{
			placeHolderEraseOnClick = ""
		}
		 
		//REV-005- Poder cambiar el nombre y el estilo de la herramienta Search.
		out << g.textField(name:'query', 'class':'customSearchField', placeholder:initialText, onfocus:placeHolderEraseOnClick)
	}
	
}


-----------------------------------------------------
CORRECTA VISUALIZACIÓN DE LAS MIGAS DE PAN/BREADCRUMB
-----------------------------------------------------
TagLib: WeceemTagLib
Ir a la def breadcrumb y substituirlo por:
    def breadcrumb = { attrs, body -> 
        def node = request[RenderEngine.REQUEST_ATTRIBUTE_NODE]
        def lineage = request[RenderEngine.REQUEST_ATTRIBUTE_PAGE].lineage
        def div = (attrs.divider != null) ? attrs.divider.decodeHTML() : ' &gt; '
        def first = true
        if (!attrs.custom?.toString()?.toBoolean()) {
            body = { args -> 
                def o = new StringBuilder()
                if (!args.first) {
                    //o << div
					//REV-20140905 Opción de personalizar el estilo del separador
					o << "<span class=\"breadCrumbSeparator\">"+div+"</span>"
                }

                def title = args.breadcrumbNode.titleForMenu.encodeAsHTML() 
                if (!args.last) {
                    o << wcm.link(node:args.breadcrumbNode) {
                        //out << title
						//REV-20140905 Opción de personalizar el estilo de los títulos intermedios
						out << "<span class=\"breadCrumbItem\">${title}</span>"
                    } 
                } else {
                    //o << "<span class=\"last\">${title}</span>"
					//REV-20140905
					o << "<span class=\"breadCrumbLastItem\">${title}</span>"
                }
                return o.toString()
            }
        }
        
        def nodes = lineage
        nodes.each { current ->
            out << body(first:first, last: current.ident() == node.ident(), breadcrumbNode:current)
            first = false
        }
    }


-----------------------------------------------------------------------------------
CORRECTA VISUALIZACIÓN DEL CÓDIGO GSP DE LOS ELEMENTOS DEL DOMINIO CREADOS (FICHAS)
-----------------------------------------------------------------------------------
TagLib: EditorFieldTagLib
OJO! La nueva versión admine \n dentro de un comentario.
Para que cuando se encuentren dos comentarios seguidos en el String content de las fichas se puedan visualizar en líneas diferentes:
1ero: Substituir 
	out << editorFieldHtmlCode(attrs)
	por
	//20141106 - Para los elementos del propio dominio se utiliza otra hoja de estilos CSS en el editor.
	String res = attrs.bean.class ----> se cambia por attrs.bean.getClass().toString()
	if(res.equals("class com.upc.WcmPlantillaFitxa") || res.equals("class com.upc.WcmPlantillaFitxaGenerica") || res.equals("class com.upc.WcmPlantillaFitxa2ColGenerica")){
	   out << editorFieldFitxaCode(attrs)
	}
	else{
		out << editorFieldHtmlCode(attrs)
	}
	//20141106 - FIN
		   
2do: Pegar el siguiente código al final del TagLib:
	//20141106 - Editor especial para las plantillas fitxa.
	def editorFieldFitxaCode = { attrs ->
		// Workaround for Grails 1.1.x bug invoking tags with body as method - have to use a template instead
		out << g.render(template:'/editors/codemirror', plugin:'weceem',
			model:[name:attrs.property, value:pageScope.content[attrs.property]])
		
		out << """
        <script language="javascript" type="text/javascript">
        var editor_${attrs.property} = CodeMirror.fromTextArea("editor_${attrs.property.encodeAsJavaScript()}", {
          parserfile: ["parsexml.js"],
          path: "${g.resource(plugin:'weceem', dir:'_weceem/codemirror/js/').encodeAsJavaScript()}",
          stylesheet: "${g.resource(plugin:'weceem', dir:'_weceem/codemirror/css', file:'xmlcolorsficha.css').encodeAsJavaScript()}",
          textWrapping: false
        });
        </script>
        """
	}

1er y 3ero se pueden substituir por:
	- Al principio de la clase añadir:
		//20141112 - Para elegir el CSS adecuado al tipo de archivo
		def xmlcolors = "xmlcolors.css"
	- En la línea 246, antes de "out << richFieldHtmlCode(attrs)" incluir:
		//20141112 - Si es una ficha se utiliza otro CSS diferente al resto de tipos de documento.
		String res = attrs.bean.getClass().toString()
		if(res.equals("class com.upc.WcmPlantillaFitxa") || res.equals("class com.upc.WcmPlantillaFitxaGenerica") || res.equals("class com.upc.WcmPlantillaFitxa2ColGenerica")){
			xmlcolors = "xmlcolorsficha.css"
		}
	- En la def editorFieldHtmlCode, línea 277 aprox (stylesheet: "${g.resource(plugin:'weceem', dir:'_weceem/codemirror/css', file:'xmlcolors.css').encodeAsJavaScript()}",)
	  Substituir 'xmlcolors.css' por xmlcolors, es decir, eliminar las comas simples y el .css.
			
3ero: Hay que incluir la hoja de estilos "xmlcolorsficha.css" en "/Portal/.link_to_grails_plugins/weceem-1.2/web-app/_weceem/codemirror/css/xmlcolorsficha.css".
El contenido del CSS es el siguiente:
	html {
	  cursor: text;
	}

	.editbox {
	  margin: .4em;
	  padding: 0;
	  font-family: monospace;
	  font-size: 10pt;
	  color: black;
	}

	.editbox p {
	  margin: 0;
	}

	span.xml-tagname {
	  color: #A0B;
	}

	span.xml-attribute {
	  color: #281;
	}

	span.xml-punctuation {
	  color: black;
	}

	span.xml-attname {
	  color: #00F;
	}

	/* Hace que cada span que contiene un comentario se muestre en una línea separada. */
	span.xml-comment {
		color: #A70;
		display: block;
	}

	/* Hace que no se muestre el salto de línea en HTML <br> cuando se sitúa detrás de un xml-comment. Evita dobles espacios. */
	span.xml-comment + br{
	  display: none;
	}

	/* Reduce el margen que tienen los comentarios con la línea superior. */
	.whitespace + .xml-comment {
	  margin-top: -12px;
	}


	span.xml-cdata {
	  color: #48A;
	}

	span.xml-processing {
	  color: #999;
	}

	span.xml-entity {
	  color: #A22;
	}

	span.xml-error {
	 color: #F00 !important;
	}

	span.xml-text {
	  color: black;
	}


	
<CONTROLADORES>****************************************************************************************************************************************
--------------------------------------------------
VISUALIZACIÓN DE FICHAS EN EL MENÚ DE LA IZQUIERDA
--------------------------------------------------
Permite la visualización en el menú izquierdo de diferentes tipos de fichas.
Controlador: WcmContentController: 
Línea: 96 justo después del código que hay con el comentario // Resolve any virtual nodes
Pegar el siguiente código:
	//REV-004-20141112 - INI - Visualizar menú desplegable para determinados tipos
	if((content.getClass().toString().equals("class org.weceem.html.WcmHTMLContent") 
		|| content.getClass().toString().equals("class com.upc.WcmPlantillaFitxa")
		|| content.getClass().toString().equals("class com.upc.WcmPlantillaFitxaGenerica")
		|| content.getClass().toString().equals("class com.upc.WcmPlantillaFitxa2ColGenerica")) && !info.uri.toString().equals("")){
		def values = info.uri.toString().split("/")
		if(values){
			if(values.size()>3){
				params.tipusMenu=values[1]
				params.desplegableSelected=values[2]
				params.itemSelected=values[3]
			}else if(values.size()>2){
				params.tipusMenu=values[1]
				params.desplegableSelected=values[2]
			}else if(values.size()>1){ //Si hay más de 1 elem en el vector significa que NO estamos en el index, por lo que cogerá por defecto el template relaciona con la página web.
				params.tipusMenu=values[1]
				params.itemSelected=values[1]
			}else{
				//En el caso de querer indicar un template por defecto para el index se debe hacer aquí.
				params.tipusMenu="index"
				//params.itemSelected="item"
			}
		}
	}
	//REV-004-FIN

	
	
*******************************************************************************************************************************************************
-----------------------------------------------------------------------------------------
MODIFICACIONES EN LA PÁGINA DE BÚSQUEDA / CAMBIO DE LA UBICACIÓN DE LA PÁGINA DE BÚSQUEDA
-----------------------------------------------------------------------------------------
Para modificar la página de búsqueda cargada, es decir, despúes de apretar al "Search" se carga la página "/view/search-results".Pues bien, para modifcar
el lugar de la ubicación o la vista HTML a cargar hay que ir al
Controlador: WcmSearchController
DEF: search
y modificar la línea 63 (aprox): def uri = params.resultsPath ?: (data.space.aliasURI ?: '')+'/view/search-results'

Workaround: (por si no funciona a la primera)
1) Cambiar la dirección en el controlador y ver cómo falla.
2) Crear la nueva página en la nueva ubicación y ejecutar para ver que funciona.
3) Eliminar la página original (si es que se desea)


-----------------------------------------
CAMBIOS EN EL COMPORTAMIENTO DEL BUSCADOR
-----------------------------------------
Servicio: WcmContentRepositoryService
DEF: searchForPublicContent
Línea: 2520 aprox.
Eliminar/Comentar toda la definición que comienza por "def results = WcmContent.search([reload:true, offset:args?.offset ?:0, max:args?.max ?: 25]){".
Luego añadir el siguiente código adaptando la parte del IF.
	//REV-20140910 Permite paginación y filtrado de tipos de documentos.
	def results = WcmContent.search([reload:true, offset:0,  max:100]){
		must(queryString(query))

		// @todo apply baseURI

		// Restrict to public
		must(term('status_publicContent', true))

		// Restrict to space
		must {
			listContentClassNames( {
				def hasSCProp = it.metaClass.hasProperty(proxyHandler.unwrapIfProxy(it).class, 'standaloneContent')
				!hasSCProp || it.standaloneContent
			} ).each { n ->
				def t = '$/'+n.replaceAll('\\.', '_')+'/space/id'
				term(t, space.id)
			}
		}
	}

	// Filter by type if required
	if (args.types) {
		results.results = filterToTypes(results.results, args.types)
		//20140922 - Primero aparecerán los resultados que tengan la palabra en su título.
		results.results = orderByTitle(results.results, query)
		
		//Una vez filtrados los resultados, nos quedamos con la cifra real de elementos
		results.total = results.results.size()
	}
	
	//20140922 - INI
	if(args.max){
		//Se realiza la paginación manualmente
		def lista = []

		def offset = args.offset ?: 0
		def max = args.max

		def limit = (offset+max) > results.total ? results.total : (offset+max)
	
		for(int i=offset; i<limit; i++){
			lista << results.results[i]
		}
		
		results.results = lista
		
	}
	//20140922 - FIN

	
	
*******************************************************************************************************************************************************
A partir de ahora se harán las adpataciones para la base de datos Oracle y el CAS.
DOC: WECEEM_v1_3_M1_ORACLE.txt

*******************************************************************************************************************************************************

		
		
------------------------------
Creación:	11-12-2014

Jesús Campos Muñoz
jesus.campos@upc.edu
------------------------------