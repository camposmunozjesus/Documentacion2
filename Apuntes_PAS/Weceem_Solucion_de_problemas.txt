WECEEM - SOLUCIÓN DE PROBLEMAS
==============================
Entre paréntesis se indica la temática del problema.
-----------
Problema 1: (GENERAL) Problema con nullpointer en WcmContentController. Cannot get property 'WcmFolder' on null object.
-----------
Grails runtime exception.
Problemas en este archivo sobre las líneas 78-79. Los mensajes que viene antes son problemas con dispatchers.
Luego también aparecen problemas conehcache.

Solución 1:
-----------
Descomprimir de nuevo el weceem-app-master en otro lugar, con GGTS en otro workspace arrancar la aplicación y se soluciona el problema.



-----------
Problema 2: (GENERAL) Problema con JavacMain compiler o similar.
-----------
Este probelma surgió intentando arreglar un error de native ascii.
Casualmente el día que se tuvo que reinstalar el JDK surgió lo del native ascii.
Al eliminar todos los plugins era incapaz de cargar los plugins y daba error en javacMain compiler o similar.

Solución 2:
-----------
Reinstalar jdk_7_0_45 y luego jdk_7_0_51.
Seleccionar en Eclipse JDK 7.051
Descargar todos los plugins y pergar el plugin weceem-1.2M



-----------
Problema 3: (SPRINGSECURITY-CAS) Solución al cierre de sesión.
-----------
La aplicación NO cierra la sesión correctamente.

Solución 3:
-----------
Página de administración:
	views
	  |
	  |--- treeTable.gsp (carga el layout: weceemadmin.gsp mediante una variable)
	  
	  weceemadmin.gsp
		|
		|---> carga el template: _header.gsp 
									
		En este _header.gsp se encuentra el link del layout, al que hay que forzar a:
		url="/$ {grails.Application.metadat.'app.name'}/logout/index"
		
	
-----------
Problema 4: (SPRINGSECURITY-CAS) Problema al entrar en cualquier página HTML.
-----------
Se visualiza el siguiente mensaje:
	User [null] with roles [[ROLE_ANONYMOUS, USER_null]] does not have the permissions [[view]] to access content at [index] in space [Default]

Solución 4:
-----------
Hay que descomentar del BootStrap.groovy:
//		ctx.wcmSecurityService.securityDelegate = [			
//			getUserName : { ->
//				def princ = springSecurityService.getPrincipal()
//				if (princ instanceof String) {
//					return null
//				} else {
//					return springSecurityService.getPrincipal()?.username
//				}				
//			},
//			//com el principal no té email definit, posem username
//			getUserEmail : { ->
//				def princ = springSecurityService.getPrincipal()
//				if (princ instanceof String) {
//					return null
//				} else {
//					return springSecurityService.getPrincipal()?.username
//				}	
//			},
//			getUserRoles : { ->
//				springSecurityService.getAuthentication().getAuthorities() ?: ['ROLE_GUEST']				
//			},
//			getUserPrincipal : { ->
//				springSecurityService.getPrincipal()						
//			}
//		]