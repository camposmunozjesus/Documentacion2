JQUERY - MANUAL
===============
<TEORÍA>**********************************************************************************************************************************************
--------
SINTAXIS
--------
Para prevenir que el código JS situado en el header se cargue antes que cualquier elemento HTML esté disponible (por ejemplo intente esconder un elemento
HTML que aún no se haya creado) se utiliza el evento ready:
	$(document).ready(function(){

	   // jQuery methods go here...

	});
Que se simplifica como:
	$(function(){

	   // jQuery methods go here...

	});

En un documento HTML debe ir incluído entre los tags <script> y </script>.

----------
SELECTORES
----------
Basado en los selectores CSS.

Element Selector
Elemento actual: $(this).hide() - hides the current element.

Todos los elemetos de un tipo: $("p").hide() - hides all <p> elements.

.class Selector
Clase: $(".test").hide() - hides all elements with class="test".

#id Selector
Id: $("#test").hide() - hides the element with id="test".

Ejemplos:
$("*") 			Selects all elements 	
$(this) 		Selects the current HTML element 	
$("p.intro") 		Selects all <p> elements with class="intro" 	
$("p:first") 		Selects the first <p> element 	
$("ul li:first") 	Selects the first <li> element of the first <ul> 	
$("ul li:first-child") 		Selects the first <li> element of every <ul> 	
$("[href]") 	Selects all elements with an href attribute 	
$("a[target='_blank']") 	Selects all <a> elements with a target attribute value equal to "_blank" 	
$("a[target!='_blank']") 	Selects all <a> elements with a target attribute value NOT equal to "_blank" 	
$(":button") 	Selects all <button> elements and <input> elements of type="button" 	
$("tr:even") 	Selects all even <tr> elements 	
$("tr:odd") 	Selects all odd <tr> elements

$("h1, p") 		Selecciona todos los elementos <h1> y <p>.
$("ul ~ table") Selecciona todos los <table> que son siblings (están dentro) de un <ul>.

Echar un vistazo a http://www.w3schools.com/Jquery/trysel.asp que hay ejemplos interesantes.


-------------------------------------------------------------------------------------------
RECORRER LOS ELEMENTOS DEL DOM/OBTENER LOS ELEMENTOS QUE SEAN DEL MISMO TIPO CON SELECTORES
-------------------------------------------------------------------------------------------
Tenemos:
	<p class="cls1" id="ident1" myProperty="owned" >Parrafo 1</p>
	<p class="cls2" >Parrafo 2</p>
	<p class="cls3" >Parrafo 3</p>
	<p class="cls4" >Parrafo 4</p>
	<p class="cls5" >Parrafo 5</p>
	
Y con el siguiente código JS se consiguen todos los elementos <p> de la página web y se varían/recuperan sus datos:
	<script>
		var parrafos = $('p')

		for(var i=0; i<parrafos.length; i++) {
			var parrafo = parrafos[i];
			if(parrafo.getAttribute('myProperty')==undefined){
				parrafo.setAttribute('myProperty', "newWestValue");
			}
			if(parrafo.getAttribute('id')==undefined){
				parrafo.setAttribute('id', "newWestId");
			}
			alert(parrafo.className);
			alert(parrafo.id);
			alert("myProperty: "+parrafo.getAttribute('myProperty'));
		}
	</script>
	
Y además sería necesario añadir:
	<link href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css" rel="stylesheet">

	<script src="http://code.jquery.com/jquery-1.10.2.js"></script>
	<script src="http://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
	</script>
	
	
<PASO DE PARÁMETROS A FUNCIONES>**********************************************************************************************************************
-------------------------------------------
PASAR PARÁMETROS A UN EFECTO/FUNCIÓN JQUERY
-------------------------------------------
Queremos pasar un parámetro a la siguiente función (la función que está dentro del click):
	$('#Menu0 div.dijitTitlePaneTitle').click(function() {
		$('#Outer0').slideToggle('medium'); ---> AQUÍ ES DONDE SE QUIERE UTILIZAR EL PARÁMETRO (*)
	});
	
	(*) Este trozo se ejecutará cuando se haga click en el elemento cuyo id sea 'Menu0'. Entonces forzará aque el elemento cuyo id sea 'Outer0' se
	despliegue o se oculte (hacer toggle).
	
Aquí dentro se puede hacer referencia a variables JS que estén fuera de $('#Menu0 div.diji ..., pero tendrán el valor del momento en que se realice el
click sobre el elemento con id='Menu0', es decir, en el siguiente ejemplo:
	var numMenusDesplegables = 3;
	
	for(var i=0; i<8; i++){
		$('#Menu'+i+' div.dijitTitlePaneTitle').click(function() {
			$('#Outer'+i).slideToggle('medium');	(**)
			alert(i);								(**)
		}); 
	}

Se espera que al pulsar sobre 'Menu0' se haga toggle sobre 'Outer0', cuando se pulse sobre 'Menu1' se haga toggle sobre 'Outer1', y así sucesivamente 
hasta 'Menu8 y 'Outer8'. Pero esto NO ocurrre así.

Esto sucede porque la zona (**) se ejecuta únicamente caundo se produce un click en alguno de los elementos con id='Menu-i', por lo que 'i' siempre
valdrá 8 y debido a esto 'Menu0' que hace toggle sobre 'Outer8', 'Menu2' que hace toggle sobre 'Outer8', y así hasta 'Menu8 que hace toggle sobre 
'Outer8'. Contando que si hay 8 menús numerados del 0 al 7 no se desplegará ninguno. El alert siempre mostrará 8.

Solución:
---------
Pasar la variable de iteración 'i' como parámetro a la función que hay dentro de la cabecera del efecto click.

Para pasar parámetros en este tipo de situaciones se utiliza:
	for(var i=0; i<8; i++){
		$('#Menu'+i+' div.dijitTitlePaneTitle').click({id: i},function(event) {
			$('#Outer'+event.data.id).slideToggle('medium');
		}); 
	}

De modo genérico:
	// say your selector and click handler looks something like this...
	$("some selector").click({param1: "Hello", param2: "World"}, cool_function);

	// in your function, just grab the event object and go crazy...
	function cool_function(event){
		alert(event.data.param1);
		alert(event.data.param2);
	}

O incluyendo la función en la cabecera:
	$("some selector").click({param1: "Hello", param2: "World"}, function(event){
		alert(event.data.param1);
		alert(event.data.param2);
	});
	
	
NOTA: la variable de la cabecera (el mapa de datos que recibe la función) NO tiene por qué llamarse 'event', puede tener cualquier otro nombre.



*****************************************************************************************************************************************************
------------------------------
Creación:	24-04-2014

Jesús Campos Muñoz
jesus.campos@upc.edu
------------------------------